// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: healthcare-service/specialization.proto

package healthcare

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Specializations struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Order                int32    `protobuf:"varint,2,opt,name=order,proto3" json:"order"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	DepartmentId         string   `protobuf:"bytes,5,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	ImageUrl             string   `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	CreatedAt            string   `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Specializations) Reset()         { *m = Specializations{} }
func (m *Specializations) String() string { return proto.CompactTextString(m) }
func (*Specializations) ProtoMessage()    {}
func (*Specializations) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df9db489869b4c3, []int{0}
}
func (m *Specializations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Specializations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Specializations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Specializations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Specializations.Merge(m, src)
}
func (m *Specializations) XXX_Size() int {
	return m.Size()
}
func (m *Specializations) XXX_DiscardUnknown() {
	xxx_messageInfo_Specializations.DiscardUnknown(m)
}

var xxx_messageInfo_Specializations proto.InternalMessageInfo

func (m *Specializations) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Specializations) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Specializations) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Specializations) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Specializations) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func (m *Specializations) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Specializations) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Specializations) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Specializations) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type GetReqStrSpecialization struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReqStrSpecialization) Reset()         { *m = GetReqStrSpecialization{} }
func (m *GetReqStrSpecialization) String() string { return proto.CompactTextString(m) }
func (*GetReqStrSpecialization) ProtoMessage()    {}
func (*GetReqStrSpecialization) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df9db489869b4c3, []int{1}
}
func (m *GetReqStrSpecialization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReqStrSpecialization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReqStrSpecialization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReqStrSpecialization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReqStrSpecialization.Merge(m, src)
}
func (m *GetReqStrSpecialization) XXX_Size() int {
	return m.Size()
}
func (m *GetReqStrSpecialization) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReqStrSpecialization.DiscardUnknown(m)
}

var xxx_messageInfo_GetReqStrSpecialization proto.InternalMessageInfo

func (m *GetReqStrSpecialization) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetReqStrSpecialization) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetReqStrSpecialization) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type ListSpecializations struct {
	Count                int32              `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Specializations      []*Specializations `protobuf:"bytes,2,rep,name=specializations,proto3" json:"specializations"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListSpecializations) Reset()         { *m = ListSpecializations{} }
func (m *ListSpecializations) String() string { return proto.CompactTextString(m) }
func (*ListSpecializations) ProtoMessage()    {}
func (*ListSpecializations) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df9db489869b4c3, []int{2}
}
func (m *ListSpecializations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSpecializations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSpecializations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSpecializations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSpecializations.Merge(m, src)
}
func (m *ListSpecializations) XXX_Size() int {
	return m.Size()
}
func (m *ListSpecializations) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSpecializations.DiscardUnknown(m)
}

var xxx_messageInfo_ListSpecializations proto.InternalMessageInfo

func (m *ListSpecializations) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListSpecializations) GetSpecializations() []*Specializations {
	if m != nil {
		return m.Specializations
	}
	return nil
}

type StatusSpecialization struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusSpecialization) Reset()         { *m = StatusSpecialization{} }
func (m *StatusSpecialization) String() string { return proto.CompactTextString(m) }
func (*StatusSpecialization) ProtoMessage()    {}
func (*StatusSpecialization) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df9db489869b4c3, []int{3}
}
func (m *StatusSpecialization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusSpecialization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusSpecialization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusSpecialization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusSpecialization.Merge(m, src)
}
func (m *StatusSpecialization) XXX_Size() int {
	return m.Size()
}
func (m *StatusSpecialization) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusSpecialization.DiscardUnknown(m)
}

var xxx_messageInfo_StatusSpecialization proto.InternalMessageInfo

func (m *StatusSpecialization) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllSpecialization struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	Field                string   `protobuf:"bytes,4,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	DepartmentId         string   `protobuf:"bytes,7,opt,name=department_id,json=departmentId,proto3" json:"department_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllSpecialization) Reset()         { *m = GetAllSpecialization{} }
func (m *GetAllSpecialization) String() string { return proto.CompactTextString(m) }
func (*GetAllSpecialization) ProtoMessage()    {}
func (*GetAllSpecialization) Descriptor() ([]byte, []int) {
	return fileDescriptor_8df9db489869b4c3, []int{4}
}
func (m *GetAllSpecialization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllSpecialization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllSpecialization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllSpecialization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllSpecialization.Merge(m, src)
}
func (m *GetAllSpecialization) XXX_Size() int {
	return m.Size()
}
func (m *GetAllSpecialization) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllSpecialization.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllSpecialization proto.InternalMessageInfo

func (m *GetAllSpecialization) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllSpecialization) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllSpecialization) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetAllSpecialization) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllSpecialization) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllSpecialization) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *GetAllSpecialization) GetDepartmentId() string {
	if m != nil {
		return m.DepartmentId
	}
	return ""
}

func init() {
	proto.RegisterType((*Specializations)(nil), "healthcare.Specializations")
	proto.RegisterType((*GetReqStrSpecialization)(nil), "healthcare.GetReqStrSpecialization")
	proto.RegisterType((*ListSpecializations)(nil), "healthcare.ListSpecializations")
	proto.RegisterType((*StatusSpecialization)(nil), "healthcare.StatusSpecialization")
	proto.RegisterType((*GetAllSpecialization)(nil), "healthcare.GetAllSpecialization")
}

func init() {
	proto.RegisterFile("healthcare-service/specialization.proto", fileDescriptor_8df9db489869b4c3)
}

var fileDescriptor_8df9db489869b4c3 = []byte{
	// 527 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x8e, 0xd2, 0x4c,
	0x14, 0xfe, 0x0b, 0x14, 0xca, 0xd9, 0x5f, 0xd7, 0x8c, 0x5d, 0xad, 0xbb, 0x11, 0x09, 0x7b, 0x21,
	0x37, 0x62, 0xb2, 0x3e, 0x01, 0xa8, 0x21, 0x9b, 0x78, 0xb1, 0x29, 0xd9, 0x0b, 0x4d, 0x0c, 0x19,
	0x3a, 0xc7, 0xdd, 0x49, 0x06, 0xa8, 0x33, 0x53, 0x12, 0x7c, 0x06, 0x1f, 0xc0, 0x47, 0xd2, 0x3b,
	0x7d, 0x03, 0x83, 0x2f, 0x62, 0x7a, 0x5a, 0x02, 0x2d, 0x48, 0xbc, 0xf0, 0xae, 0xdf, 0xf7, 0x9d,
	0x39, 0xcc, 0xf9, 0xce, 0x37, 0xc0, 0xd3, 0x5b, 0xe4, 0xca, 0xde, 0x46, 0x5c, 0xe3, 0x33, 0x83,
	0x7a, 0x21, 0x23, 0x7c, 0x6e, 0x62, 0x8c, 0x24, 0x57, 0xf2, 0x13, 0xb7, 0x72, 0x3e, 0xeb, 0xc5,
	0x7a, 0x6e, 0xe7, 0x0c, 0x36, 0x85, 0x9d, 0xcf, 0x15, 0x38, 0x1e, 0x15, 0x8a, 0x0c, 0xbb, 0x0b,
	0x15, 0x29, 0x02, 0xa7, 0xed, 0x74, 0x9b, 0x61, 0x45, 0x0a, 0xe6, 0x83, 0x3b, 0xd7, 0x02, 0x75,
	0x50, 0x69, 0x3b, 0x5d, 0x37, 0xcc, 0x00, 0x63, 0x50, 0x9b, 0xf1, 0x29, 0x06, 0x55, 0xaa, 0xa3,
	0x6f, 0xd6, 0x86, 0x23, 0x81, 0x26, 0xd2, 0x32, 0x4e, 0x3b, 0x05, 0x35, 0x92, 0xb6, 0x29, 0x76,
	0x0e, 0x77, 0x04, 0xc6, 0x5c, 0xdb, 0x29, 0xce, 0xec, 0x58, 0x8a, 0xc0, 0xa5, 0x9a, 0xff, 0x37,
	0xe4, 0xa5, 0x60, 0x67, 0xd0, 0x94, 0x53, 0x7e, 0x83, 0xe3, 0x44, 0xab, 0xa0, 0x4e, 0x05, 0x1e,
	0x11, 0xd7, 0x5a, 0xb1, 0xc7, 0x00, 0x91, 0x46, 0x6e, 0x51, 0x8c, 0xb9, 0x0d, 0x1a, 0xa4, 0x36,
	0x73, 0xa6, 0x6f, 0x53, 0x39, 0x89, 0xc5, 0x5a, 0xf6, 0x32, 0x39, 0x67, 0x32, 0x59, 0xa0, 0xc2,
	0x5c, 0x6e, 0x66, 0x72, 0xce, 0xf4, 0x6d, 0x67, 0x02, 0x0f, 0x87, 0x68, 0x43, 0xfc, 0x38, 0xb2,
	0xba, 0x68, 0x4b, 0xea, 0xc2, 0x07, 0x89, 0x6a, 0x6d, 0x4c, 0x06, 0x52, 0x76, 0xc1, 0x55, 0x82,
	0xe4, 0x4d, 0x33, 0xcc, 0x00, 0x0d, 0x60, 0xc6, 0x3c, 0xb2, 0x72, 0x91, 0x19, 0xe4, 0x85, 0x9e,
	0x34, 0x7d, 0xc2, 0x1d, 0x0d, 0xf7, 0xdf, 0x48, 0x63, 0xcb, 0xae, 0xfb, 0xe0, 0x46, 0xf3, 0x64,
	0x66, 0xa9, 0xbf, 0x1b, 0x66, 0x80, 0xbd, 0x86, 0xe3, 0xe2, 0x0e, 0x4d, 0x50, 0x69, 0x57, 0xbb,
	0x47, 0x17, 0x67, 0xbd, 0xcd, 0x16, 0x7b, 0xa5, 0x5e, 0x61, 0xf9, 0x4c, 0xa7, 0x07, 0xfe, 0xc8,
	0x72, 0x9b, 0x98, 0xd2, 0x50, 0x0f, 0xa0, 0x6e, 0x88, 0xa7, 0x5f, 0xf5, 0xc2, 0x1c, 0x75, 0xbe,
	0x39, 0xe0, 0x0f, 0xd1, 0xf6, 0x95, 0x2a, 0x1d, 0x60, 0x50, 0x8b, 0xf9, 0x0d, 0xe6, 0x97, 0xa4,
	0xef, 0xf4, 0xe6, 0x4a, 0x4e, 0xa5, 0x5d, 0xe7, 0x83, 0xc0, 0x41, 0x0f, 0x36, 0x66, 0xd6, 0xf6,
	0x9a, 0xe9, 0x6e, 0x9b, 0xf9, 0x08, 0x3c, 0x4a, 0xdc, 0x78, 0xb2, 0xcc, 0xc3, 0xd0, 0x20, 0x3c,
	0x58, 0xee, 0xa6, 0xa9, 0xb1, 0x9b, 0xa6, 0x8b, 0x1f, 0x55, 0x38, 0x29, 0x4e, 0x31, 0xca, 0x5e,
	0x07, 0xbb, 0x02, 0xff, 0x25, 0x05, 0xa7, 0x34, 0xe4, 0x21, 0x6f, 0x4f, 0x0f, 0x89, 0xec, 0x2d,
	0x9c, 0x0c, 0xb1, 0xb4, 0xda, 0xc1, 0xf2, 0x52, 0xb0, 0xf3, 0xed, 0x53, 0x7f, 0x88, 0xd8, 0xe1,
	0xd6, 0xef, 0xa8, 0xf5, 0xce, 0x46, 0x0c, 0x6b, 0x97, 0x5a, 0xef, 0x94, 0x9c, 0x3e, 0xd9, 0xae,
	0xd8, 0x97, 0xbd, 0x2b, 0xf0, 0xaf, 0xe9, 0x89, 0xfc, 0x33, 0x23, 0xde, 0x83, 0xff, 0x8a, 0x5e,
	0x55, 0xa9, 0xe3, 0x5f, 0xf9, 0x50, 0x98, 0x68, 0x5f, 0x6e, 0x07, 0xf7, 0xbe, 0xae, 0x5a, 0xce,
	0xf7, 0x55, 0xcb, 0xf9, 0xb9, 0x6a, 0x39, 0x5f, 0x7e, 0xb5, 0xfe, 0x9b, 0xd4, 0xe9, 0xbf, 0xed,
	0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x07, 0xce, 0x44, 0xdc, 0x06, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpecializationServiceClient is the client API for SpecializationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpecializationServiceClient interface {
	CreateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error)
	GetSpecializationById(ctx context.Context, in *GetReqStrSpecialization, opts ...grpc.CallOption) (*Specializations, error)
	GetAllSpecializations(ctx context.Context, in *GetAllSpecialization, opts ...grpc.CallOption) (*ListSpecializations, error)
	UpdateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error)
	DeleteSpecialization(ctx context.Context, in *GetReqStrSpecialization, opts ...grpc.CallOption) (*StatusSpecialization, error)
}

type specializationServiceClient struct {
	cc *grpc.ClientConn
}

func NewSpecializationServiceClient(cc *grpc.ClientConn) SpecializationServiceClient {
	return &specializationServiceClient{cc}
}

func (c *specializationServiceClient) CreateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error) {
	out := new(Specializations)
	err := c.cc.Invoke(ctx, "/healthcare.SpecializationService/CreateSpecialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specializationServiceClient) GetSpecializationById(ctx context.Context, in *GetReqStrSpecialization, opts ...grpc.CallOption) (*Specializations, error) {
	out := new(Specializations)
	err := c.cc.Invoke(ctx, "/healthcare.SpecializationService/GetSpecializationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specializationServiceClient) GetAllSpecializations(ctx context.Context, in *GetAllSpecialization, opts ...grpc.CallOption) (*ListSpecializations, error) {
	out := new(ListSpecializations)
	err := c.cc.Invoke(ctx, "/healthcare.SpecializationService/GetAllSpecializations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specializationServiceClient) UpdateSpecialization(ctx context.Context, in *Specializations, opts ...grpc.CallOption) (*Specializations, error) {
	out := new(Specializations)
	err := c.cc.Invoke(ctx, "/healthcare.SpecializationService/UpdateSpecialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specializationServiceClient) DeleteSpecialization(ctx context.Context, in *GetReqStrSpecialization, opts ...grpc.CallOption) (*StatusSpecialization, error) {
	out := new(StatusSpecialization)
	err := c.cc.Invoke(ctx, "/healthcare.SpecializationService/DeleteSpecialization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecializationServiceServer is the server API for SpecializationService service.
type SpecializationServiceServer interface {
	CreateSpecialization(context.Context, *Specializations) (*Specializations, error)
	GetSpecializationById(context.Context, *GetReqStrSpecialization) (*Specializations, error)
	GetAllSpecializations(context.Context, *GetAllSpecialization) (*ListSpecializations, error)
	UpdateSpecialization(context.Context, *Specializations) (*Specializations, error)
	DeleteSpecialization(context.Context, *GetReqStrSpecialization) (*StatusSpecialization, error)
}

// UnimplementedSpecializationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSpecializationServiceServer struct {
}

func (*UnimplementedSpecializationServiceServer) CreateSpecialization(ctx context.Context, req *Specializations) (*Specializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialization not implemented")
}
func (*UnimplementedSpecializationServiceServer) GetSpecializationById(ctx context.Context, req *GetReqStrSpecialization) (*Specializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecializationById not implemented")
}
func (*UnimplementedSpecializationServiceServer) GetAllSpecializations(ctx context.Context, req *GetAllSpecialization) (*ListSpecializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSpecializations not implemented")
}
func (*UnimplementedSpecializationServiceServer) UpdateSpecialization(ctx context.Context, req *Specializations) (*Specializations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecialization not implemented")
}
func (*UnimplementedSpecializationServiceServer) DeleteSpecialization(ctx context.Context, req *GetReqStrSpecialization) (*StatusSpecialization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecialization not implemented")
}

func RegisterSpecializationServiceServer(s *grpc.Server, srv SpecializationServiceServer) {
	s.RegisterService(&_SpecializationService_serviceDesc, srv)
}

func _SpecializationService_CreateSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specializations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecializationServiceServer).CreateSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.SpecializationService/CreateSpecialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecializationServiceServer).CreateSpecialization(ctx, req.(*Specializations))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecializationService_GetSpecializationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStrSpecialization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecializationServiceServer).GetSpecializationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.SpecializationService/GetSpecializationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecializationServiceServer).GetSpecializationById(ctx, req.(*GetReqStrSpecialization))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecializationService_GetAllSpecializations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSpecialization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecializationServiceServer).GetAllSpecializations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.SpecializationService/GetAllSpecializations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecializationServiceServer).GetAllSpecializations(ctx, req.(*GetAllSpecialization))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecializationService_UpdateSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Specializations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecializationServiceServer).UpdateSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.SpecializationService/UpdateSpecialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecializationServiceServer).UpdateSpecialization(ctx, req.(*Specializations))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpecializationService_DeleteSpecialization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStrSpecialization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecializationServiceServer).DeleteSpecialization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.SpecializationService/DeleteSpecialization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecializationServiceServer).DeleteSpecialization(ctx, req.(*GetReqStrSpecialization))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpecializationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "healthcare.SpecializationService",
	HandlerType: (*SpecializationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpecialization",
			Handler:    _SpecializationService_CreateSpecialization_Handler,
		},
		{
			MethodName: "GetSpecializationById",
			Handler:    _SpecializationService_GetSpecializationById_Handler,
		},
		{
			MethodName: "GetAllSpecializations",
			Handler:    _SpecializationService_GetAllSpecializations_Handler,
		},
		{
			MethodName: "UpdateSpecialization",
			Handler:    _SpecializationService_UpdateSpecialization_Handler,
		},
		{
			MethodName: "DeleteSpecialization",
			Handler:    _SpecializationService_DeleteSpecialization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcare-service/specialization.proto",
}

func (m *Specializations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Specializations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Specializations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Order != 0 {
		i = encodeVarintSpecialization(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReqStrSpecialization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReqStrSpecialization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReqStrSpecialization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSpecializations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSpecializations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSpecializations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Specializations) > 0 {
		for iNdEx := len(m.Specializations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Specializations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSpecialization(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintSpecialization(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusSpecialization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusSpecialization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusSpecialization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllSpecialization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllSpecialization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllSpecialization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DepartmentId) > 0 {
		i -= len(m.DepartmentId)
		copy(dAtA[i:], m.DepartmentId)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.DepartmentId)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintSpecialization(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintSpecialization(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintSpecialization(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpecialization(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpecialization(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Specializations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	if m.Order != 0 {
		n += 1 + sovSpecialization(uint64(m.Order))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReqStrSpecialization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSpecializations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSpecialization(uint64(m.Count))
	}
	if len(m.Specializations) > 0 {
		for _, e := range m.Specializations {
			l = e.Size()
			n += 1 + l + sovSpecialization(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusSpecialization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllSpecialization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovSpecialization(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovSpecialization(uint64(m.Limit))
	}
	if m.IsActive {
		n += 2
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	l = len(m.DepartmentId)
	if l > 0 {
		n += 1 + l + sovSpecialization(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSpecialization(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpecialization(x uint64) (n int) {
	return sovSpecialization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Specializations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Specializations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Specializations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecialization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReqStrSpecialization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReqStrSpecialization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReqStrSpecialization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecialization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSpecializations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSpecializations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSpecializations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Specializations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Specializations = append(m.Specializations, &Specializations{})
			if err := m.Specializations[len(m.Specializations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecialization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusSpecialization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusSpecialization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusSpecialization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecialization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllSpecialization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllSpecialization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllSpecialization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSpecialization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpecialization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpecialization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecialization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpecialization
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpecialization
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpecialization
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpecialization        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpecialization          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpecialization = fmt.Errorf("proto: unexpected end of group")
)
