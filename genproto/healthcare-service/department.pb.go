// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: healthcare-service/department.proto

package healthcare

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetAllDepartment struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Field                string   `protobuf:"bytes,3,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	IsActive             bool     `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllDepartment) Reset()         { *m = GetAllDepartment{} }
func (m *GetAllDepartment) String() string { return proto.CompactTextString(m) }
func (*GetAllDepartment) ProtoMessage()    {}
func (*GetAllDepartment) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b27ef028e04df4, []int{0}
}
func (m *GetAllDepartment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllDepartment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllDepartment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllDepartment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllDepartment.Merge(m, src)
}
func (m *GetAllDepartment) XXX_Size() int {
	return m.Size()
}
func (m *GetAllDepartment) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllDepartment.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllDepartment proto.InternalMessageInfo

func (m *GetAllDepartment) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllDepartment) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllDepartment) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllDepartment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllDepartment) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *GetAllDepartment) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type ListDepartments struct {
	Count                int64         `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Departments          []*Department `protobuf:"bytes,2,rep,name=departments,proto3" json:"departments"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListDepartments) Reset()         { *m = ListDepartments{} }
func (m *ListDepartments) String() string { return proto.CompactTextString(m) }
func (*ListDepartments) ProtoMessage()    {}
func (*ListDepartments) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b27ef028e04df4, []int{1}
}
func (m *ListDepartments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDepartments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDepartments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDepartments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDepartments.Merge(m, src)
}
func (m *ListDepartments) XXX_Size() int {
	return m.Size()
}
func (m *ListDepartments) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDepartments.DiscardUnknown(m)
}

var xxx_messageInfo_ListDepartments proto.InternalMessageInfo

func (m *ListDepartments) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListDepartments) GetDepartments() []*Department {
	if m != nil {
		return m.Departments
	}
	return nil
}

type StatusDepartment struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusDepartment) Reset()         { *m = StatusDepartment{} }
func (m *StatusDepartment) String() string { return proto.CompactTextString(m) }
func (*StatusDepartment) ProtoMessage()    {}
func (*StatusDepartment) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b27ef028e04df4, []int{2}
}
func (m *StatusDepartment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusDepartment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusDepartment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusDepartment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusDepartment.Merge(m, src)
}
func (m *StatusDepartment) XXX_Size() int {
	return m.Size()
}
func (m *StatusDepartment) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusDepartment.DiscardUnknown(m)
}

var xxx_messageInfo_StatusDepartment proto.InternalMessageInfo

func (m *StatusDepartment) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Department struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Order                int32    `protobuf:"varint,2,opt,name=order,proto3" json:"order"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Description          string   `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
	ImageUrl             string   `protobuf:"bytes,5,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`
	FloorNumber          int32    `protobuf:"varint,6,opt,name=floor_number,json=floorNumber,proto3" json:"floor_number"`
	ShortDescription     string   `protobuf:"bytes,7,opt,name=short_description,json=shortDescription,proto3" json:"short_description"`
	CreatedAt            string   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Department) Reset()         { *m = Department{} }
func (m *Department) String() string { return proto.CompactTextString(m) }
func (*Department) ProtoMessage()    {}
func (*Department) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b27ef028e04df4, []int{3}
}
func (m *Department) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Department) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Department.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Department) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Department.Merge(m, src)
}
func (m *Department) XXX_Size() int {
	return m.Size()
}
func (m *Department) XXX_DiscardUnknown() {
	xxx_messageInfo_Department.DiscardUnknown(m)
}

var xxx_messageInfo_Department proto.InternalMessageInfo

func (m *Department) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Department) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *Department) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Department) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Department) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

func (m *Department) GetFloorNumber() int32 {
	if m != nil {
		return m.FloorNumber
	}
	return 0
}

func (m *Department) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *Department) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Department) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Department) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type GetReqStrDepartment struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReqStrDepartment) Reset()         { *m = GetReqStrDepartment{} }
func (m *GetReqStrDepartment) String() string { return proto.CompactTextString(m) }
func (*GetReqStrDepartment) ProtoMessage()    {}
func (*GetReqStrDepartment) Descriptor() ([]byte, []int) {
	return fileDescriptor_28b27ef028e04df4, []int{4}
}
func (m *GetReqStrDepartment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReqStrDepartment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReqStrDepartment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReqStrDepartment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReqStrDepartment.Merge(m, src)
}
func (m *GetReqStrDepartment) XXX_Size() int {
	return m.Size()
}
func (m *GetReqStrDepartment) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReqStrDepartment.DiscardUnknown(m)
}

var xxx_messageInfo_GetReqStrDepartment proto.InternalMessageInfo

func (m *GetReqStrDepartment) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetReqStrDepartment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetReqStrDepartment) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func init() {
	proto.RegisterType((*GetAllDepartment)(nil), "healthcare.GetAllDepartment")
	proto.RegisterType((*ListDepartments)(nil), "healthcare.ListDepartments")
	proto.RegisterType((*StatusDepartment)(nil), "healthcare.StatusDepartment")
	proto.RegisterType((*Department)(nil), "healthcare.Department")
	proto.RegisterType((*GetReqStrDepartment)(nil), "healthcare.GetReqStrDepartment")
}

func init() {
	proto.RegisterFile("healthcare-service/department.proto", fileDescriptor_28b27ef028e04df4)
}

var fileDescriptor_28b27ef028e04df4 = []byte{
	// 536 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0xed, 0x34, 0xa9, 0x33, 0xf9, 0x05, 0xce, 0x82, 0x2a, 0xd3, 0x42, 0x08, 0xe1, 0x12,
	0x81, 0x08, 0x52, 0xb9, 0x70, 0x4d, 0x88, 0x14, 0x21, 0x55, 0x95, 0x70, 0xd4, 0x2b, 0xd6, 0xc6,
	0x9e, 0x36, 0x2b, 0x6d, 0xe2, 0xb0, 0xbb, 0x8e, 0x94, 0x77, 0xe0, 0x01, 0x38, 0xf2, 0x0c, 0x3c,
	0x05, 0x47, 0x1e, 0x01, 0x85, 0x17, 0x41, 0x1e, 0x9b, 0x7a, 0x13, 0xa5, 0xe2, 0xc0, 0xcd, 0xf3,
	0x7d, 0xa3, 0xd9, 0xf9, 0xbe, 0xfd, 0xd6, 0xf0, 0x7c, 0x8e, 0x5c, 0x9a, 0x79, 0xcc, 0x15, 0xbe,
	0xd2, 0xa8, 0xd6, 0x22, 0xc6, 0xd7, 0x09, 0xae, 0xb8, 0x32, 0x0b, 0x5c, 0x9a, 0xc1, 0x4a, 0xa5,
	0x26, 0x65, 0x50, 0x35, 0xf5, 0xbe, 0x3a, 0xe0, 0x4f, 0xd0, 0x0c, 0xa5, 0x1c, 0xdf, 0xb6, 0x31,
	0x06, 0x47, 0x2b, 0x7e, 0x83, 0x81, 0xd3, 0x75, 0xfa, 0xb5, 0x90, 0xbe, 0xd9, 0x43, 0xa8, 0x4b,
	0xb1, 0x10, 0x26, 0x70, 0x09, 0x2c, 0x8a, 0x1c, 0xbd, 0x16, 0x28, 0x93, 0xa0, 0xd6, 0x75, 0xfa,
	0xcd, 0xb0, 0x28, 0x72, 0x74, 0xcd, 0x65, 0x86, 0xc1, 0x51, 0x81, 0x52, 0xc1, 0x1e, 0x81, 0x97,
	0xaa, 0x04, 0x55, 0x34, 0xdb, 0x04, 0x75, 0x22, 0x8e, 0xa9, 0x1e, 0x6d, 0xd8, 0x19, 0x34, 0x85,
	0x8e, 0x78, 0x6c, 0xc4, 0x1a, 0x83, 0x46, 0xd7, 0xe9, 0x7b, 0xa1, 0x27, 0xf4, 0x90, 0xea, 0x1e,
	0x87, 0xfb, 0x17, 0x42, 0x9b, 0x6a, 0x3f, 0x9d, 0x1f, 0x10, 0xa7, 0xd9, 0xd2, 0x94, 0x1b, 0x16,
	0x05, 0x7b, 0x0b, 0xad, 0x4a, 0xab, 0x0e, 0xdc, 0x6e, 0xad, 0xdf, 0x3a, 0x3f, 0x19, 0x54, 0x6a,
	0x07, 0xd5, 0x8c, 0xd0, 0x6e, 0xed, 0xbd, 0x00, 0x7f, 0x6a, 0xb8, 0xc9, 0xb4, 0x65, 0xc2, 0x09,
	0x34, 0x34, 0x61, 0x74, 0x88, 0x17, 0x96, 0x55, 0xef, 0x9b, 0x0b, 0x60, 0xb5, 0xdd, 0x03, 0x57,
	0x24, 0xd4, 0xd2, 0x0c, 0x5d, 0x41, 0xda, 0x49, 0x15, 0xf9, 0x54, 0x0f, 0x8b, 0x22, 0x77, 0x74,
	0xc9, 0x17, 0x58, 0xda, 0x44, 0xdf, 0xac, 0x9b, 0xaf, 0xab, 0x63, 0x25, 0x56, 0x46, 0xa4, 0xcb,
	0xd2, 0x2b, 0x1b, 0x22, 0x5b, 0x16, 0xfc, 0x06, 0xa3, 0x4c, 0xc9, 0xd2, 0x32, 0x8f, 0x80, 0x2b,
	0x25, 0xd9, 0x33, 0xf8, 0xff, 0x5a, 0xa6, 0xa9, 0x8a, 0x96, 0xd9, 0x62, 0x86, 0x8a, 0x6c, 0xab,
	0x87, 0x2d, 0xc2, 0x2e, 0x09, 0x62, 0x2f, 0xa1, 0xad, 0xe7, 0xa9, 0x32, 0x91, 0x7d, 0xce, 0x31,
	0xcd, 0xf1, 0x89, 0x18, 0x5b, 0x87, 0x3d, 0x01, 0x88, 0x15, 0x72, 0x83, 0x49, 0xc4, 0x4d, 0xe0,
	0x51, 0x57, 0xb3, 0x44, 0x86, 0x26, 0xa7, 0xb3, 0x55, 0xf2, 0x87, 0x6e, 0x16, 0x74, 0x89, 0x14,
	0x74, 0x82, 0x12, 0x4b, 0x1a, 0x0a, 0xba, 0x44, 0x86, 0xa6, 0xf7, 0x11, 0x1e, 0x4c, 0xd0, 0x84,
	0xf8, 0x69, 0x6a, 0x94, 0x65, 0xde, 0x6d, 0x7c, 0x9c, 0x83, 0xf1, 0x71, 0xed, 0xf8, 0xec, 0x64,
	0xa4, 0xb6, 0x9b, 0x91, 0xf3, 0xcf, 0x35, 0x68, 0x57, 0x73, 0xa7, 0x45, 0xf2, 0xd9, 0x08, 0xfc,
	0x77, 0x24, 0xc0, 0xbe, 0xd6, 0xc3, 0x79, 0x38, 0xbd, 0x03, 0x67, 0x17, 0xd0, 0x9e, 0xa0, 0x15,
	0xbe, 0xd1, 0xe6, 0x7d, 0xc2, 0x9e, 0xda, 0xcd, 0x07, 0x84, 0xdd, 0x39, 0xed, 0x92, 0xa6, 0xed,
	0xbc, 0x36, 0xcd, 0x1e, 0xef, 0x4d, 0xdb, 0xa1, 0x4f, 0xcf, 0x6c, 0x76, 0xff, 0x21, 0x8c, 0xc0,
	0xbf, 0xa2, 0x3b, 0xf8, 0x07, 0x85, 0x1f, 0xc0, 0x1f, 0xd3, 0x45, 0x59, 0xd8, 0x5f, 0x05, 0xee,
	0xec, 0xbc, 0xff, 0x76, 0x46, 0xfe, 0xf7, 0x6d, 0xc7, 0xf9, 0xb1, 0xed, 0x38, 0x3f, 0xb7, 0x1d,
	0xe7, 0xcb, 0xaf, 0xce, 0x7f, 0xb3, 0x06, 0xfd, 0x7a, 0xde, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0xfe, 0xd9, 0x4f, 0x2d, 0xa1, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DepartmentServiceClient is the client API for DepartmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepartmentServiceClient interface {
	CreateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error)
	GetDepartmentById(ctx context.Context, in *GetReqStrDepartment, opts ...grpc.CallOption) (*Department, error)
	GetAllDepartments(ctx context.Context, in *GetAllDepartment, opts ...grpc.CallOption) (*ListDepartments, error)
	UpdateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error)
	DeleteDepartment(ctx context.Context, in *GetReqStrDepartment, opts ...grpc.CallOption) (*StatusDepartment, error)
}

type departmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewDepartmentServiceClient(cc *grpc.ClientConn) DepartmentServiceClient {
	return &departmentServiceClient{cc}
}

func (c *departmentServiceClient) CreateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/healthcare.DepartmentService/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetDepartmentById(ctx context.Context, in *GetReqStrDepartment, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/healthcare.DepartmentService/GetDepartmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetAllDepartments(ctx context.Context, in *GetAllDepartment, opts ...grpc.CallOption) (*ListDepartments, error) {
	out := new(ListDepartments)
	err := c.cc.Invoke(ctx, "/healthcare.DepartmentService/GetAllDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) UpdateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/healthcare.DepartmentService/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) DeleteDepartment(ctx context.Context, in *GetReqStrDepartment, opts ...grpc.CallOption) (*StatusDepartment, error) {
	out := new(StatusDepartment)
	err := c.cc.Invoke(ctx, "/healthcare.DepartmentService/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServiceServer is the server API for DepartmentService service.
type DepartmentServiceServer interface {
	CreateDepartment(context.Context, *Department) (*Department, error)
	GetDepartmentById(context.Context, *GetReqStrDepartment) (*Department, error)
	GetAllDepartments(context.Context, *GetAllDepartment) (*ListDepartments, error)
	UpdateDepartment(context.Context, *Department) (*Department, error)
	DeleteDepartment(context.Context, *GetReqStrDepartment) (*StatusDepartment, error)
}

// UnimplementedDepartmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDepartmentServiceServer struct {
}

func (*UnimplementedDepartmentServiceServer) CreateDepartment(ctx context.Context, req *Department) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (*UnimplementedDepartmentServiceServer) GetDepartmentById(ctx context.Context, req *GetReqStrDepartment) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (*UnimplementedDepartmentServiceServer) GetAllDepartments(ctx context.Context, req *GetAllDepartment) (*ListDepartments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDepartments not implemented")
}
func (*UnimplementedDepartmentServiceServer) UpdateDepartment(ctx context.Context, req *Department) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (*UnimplementedDepartmentServiceServer) DeleteDepartment(ctx context.Context, req *GetReqStrDepartment) (*StatusDepartment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}

func RegisterDepartmentServiceServer(s *grpc.Server, srv DepartmentServiceServer) {
	s.RegisterService(&_DepartmentService_serviceDesc, srv)
}

func _DepartmentService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Department)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DepartmentService/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).CreateDepartment(ctx, req.(*Department))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStrDepartment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DepartmentService/GetDepartmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartmentById(ctx, req.(*GetReqStrDepartment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetAllDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDepartment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetAllDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DepartmentService/GetAllDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetAllDepartments(ctx, req.(*GetAllDepartment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Department)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DepartmentService/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).UpdateDepartment(ctx, req.(*Department))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqStrDepartment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DepartmentService/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).DeleteDepartment(ctx, req.(*GetReqStrDepartment))
	}
	return interceptor(ctx, in, info, handler)
}

var _DepartmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "healthcare.DepartmentService",
	HandlerType: (*DepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _DepartmentService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartmentById",
			Handler:    _DepartmentService_GetDepartmentById_Handler,
		},
		{
			MethodName: "GetAllDepartments",
			Handler:    _DepartmentService_GetAllDepartments_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _DepartmentService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _DepartmentService_DeleteDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcare-service/department.proto",
}

func (m *GetAllDepartment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllDepartment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllDepartment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDepartments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDepartments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDepartments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Departments) > 0 {
		for iNdEx := len(m.Departments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Departments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDepartment(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusDepartment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusDepartment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusDepartment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Department) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Department) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Department) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ShortDescription) > 0 {
		i -= len(m.ShortDescription)
		copy(dAtA[i:], m.ShortDescription)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.ShortDescription)))
		i--
		dAtA[i] = 0x3a
	}
	if m.FloorNumber != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.FloorNumber))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Order != 0 {
		i = encodeVarintDepartment(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetReqStrDepartment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReqStrDepartment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReqStrDepartment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDepartment(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDepartment(dAtA []byte, offset int, v uint64) int {
	offset -= sovDepartment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetAllDepartment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovDepartment(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovDepartment(uint64(m.Limit))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDepartments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovDepartment(uint64(m.Count))
	}
	if len(m.Departments) > 0 {
		for _, e := range m.Departments {
			l = e.Size()
			n += 1 + l + sovDepartment(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusDepartment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Department) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.Order != 0 {
		n += 1 + sovDepartment(uint64(m.Order))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.FloorNumber != 0 {
		n += 1 + sovDepartment(uint64(m.FloorNumber))
	}
	l = len(m.ShortDescription)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetReqStrDepartment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDepartment(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDepartment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDepartment(x uint64) (n int) {
	return sovDepartment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAllDepartment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllDepartment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllDepartment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDepartments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDepartments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDepartments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Departments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Departments = append(m.Departments, &Department{})
			if err := m.Departments[len(m.Departments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusDepartment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusDepartment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusDepartment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Department) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Department: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Department: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FloorNumber", wireType)
			}
			m.FloorNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FloorNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetReqStrDepartment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReqStrDepartment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReqStrDepartment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDepartment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDepartment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDepartment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDepartment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDepartment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDepartment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepartment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDepartment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDepartment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDepartment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDepartment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDepartment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDepartment = fmt.Errorf("proto: unexpected end of group")
)
