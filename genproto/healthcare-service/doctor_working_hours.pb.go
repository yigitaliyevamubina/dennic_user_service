// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: healthcare-service/doctor_working_hours.proto

package healthcare

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetReqInt struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReqInt) Reset()         { *m = GetReqInt{} }
func (m *GetReqInt) String() string { return proto.CompactTextString(m) }
func (*GetReqInt) ProtoMessage()    {}
func (*GetReqInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f24b76898b6e348, []int{0}
}
func (m *GetReqInt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetReqInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetReqInt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetReqInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReqInt.Merge(m, src)
}
func (m *GetReqInt) XXX_Size() int {
	return m.Size()
}
func (m *GetReqInt) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReqInt.DiscardUnknown(m)
}

var xxx_messageInfo_GetReqInt proto.InternalMessageInfo

func (m *GetReqInt) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetReqInt) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetReqInt) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type DelReqInt struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	IsActive             bool     `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	IsHardDeleted        bool     `protobuf:"varint,3,opt,name=is_hard_deleted,json=isHardDeleted,proto3" json:"is_hard_deleted"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelReqInt) Reset()         { *m = DelReqInt{} }
func (m *DelReqInt) String() string { return proto.CompactTextString(m) }
func (*DelReqInt) ProtoMessage()    {}
func (*DelReqInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f24b76898b6e348, []int{1}
}
func (m *DelReqInt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelReqInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelReqInt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelReqInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelReqInt.Merge(m, src)
}
func (m *DelReqInt) XXX_Size() int {
	return m.Size()
}
func (m *DelReqInt) XXX_DiscardUnknown() {
	xxx_messageInfo_DelReqInt.DiscardUnknown(m)
}

var xxx_messageInfo_DelReqInt proto.InternalMessageInfo

func (m *DelReqInt) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelReqInt) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *DelReqInt) GetIsHardDeleted() bool {
	if m != nil {
		return m.IsHardDeleted
	}
	return false
}

type StatusDoctorWorkingHours struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusDoctorWorkingHours) Reset()         { *m = StatusDoctorWorkingHours{} }
func (m *StatusDoctorWorkingHours) String() string { return proto.CompactTextString(m) }
func (*StatusDoctorWorkingHours) ProtoMessage()    {}
func (*StatusDoctorWorkingHours) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f24b76898b6e348, []int{2}
}
func (m *StatusDoctorWorkingHours) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusDoctorWorkingHours) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusDoctorWorkingHours.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusDoctorWorkingHours) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusDoctorWorkingHours.Merge(m, src)
}
func (m *StatusDoctorWorkingHours) XXX_Size() int {
	return m.Size()
}
func (m *StatusDoctorWorkingHours) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusDoctorWorkingHours.DiscardUnknown(m)
}

var xxx_messageInfo_StatusDoctorWorkingHours proto.InternalMessageInfo

func (m *StatusDoctorWorkingHours) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllDoctorWorkingHoursReq struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Limit                int64    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit"`
	Field                string   `protobuf:"bytes,3,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	IsActive             bool     `protobuf:"varint,6,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllDoctorWorkingHoursReq) Reset()         { *m = GetAllDoctorWorkingHoursReq{} }
func (m *GetAllDoctorWorkingHoursReq) String() string { return proto.CompactTextString(m) }
func (*GetAllDoctorWorkingHoursReq) ProtoMessage()    {}
func (*GetAllDoctorWorkingHoursReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f24b76898b6e348, []int{3}
}
func (m *GetAllDoctorWorkingHoursReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllDoctorWorkingHoursReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllDoctorWorkingHoursReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllDoctorWorkingHoursReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllDoctorWorkingHoursReq.Merge(m, src)
}
func (m *GetAllDoctorWorkingHoursReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllDoctorWorkingHoursReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllDoctorWorkingHoursReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllDoctorWorkingHoursReq proto.InternalMessageInfo

func (m *GetAllDoctorWorkingHoursReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllDoctorWorkingHoursReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllDoctorWorkingHoursReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllDoctorWorkingHoursReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllDoctorWorkingHoursReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *GetAllDoctorWorkingHoursReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type DoctorWorkingHours struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	DayOfWeek            string   `protobuf:"bytes,3,opt,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week"`
	StartTime            string   `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	FinishTime           string   `protobuf:"bytes,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorWorkingHours) Reset()         { *m = DoctorWorkingHours{} }
func (m *DoctorWorkingHours) String() string { return proto.CompactTextString(m) }
func (*DoctorWorkingHours) ProtoMessage()    {}
func (*DoctorWorkingHours) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f24b76898b6e348, []int{4}
}
func (m *DoctorWorkingHours) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorWorkingHours) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorWorkingHours.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorWorkingHours) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorWorkingHours.Merge(m, src)
}
func (m *DoctorWorkingHours) XXX_Size() int {
	return m.Size()
}
func (m *DoctorWorkingHours) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorWorkingHours.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorWorkingHours proto.InternalMessageInfo

func (m *DoctorWorkingHours) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DoctorWorkingHours) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorWorkingHours) GetDayOfWeek() string {
	if m != nil {
		return m.DayOfWeek
	}
	return ""
}

func (m *DoctorWorkingHours) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *DoctorWorkingHours) GetFinishTime() string {
	if m != nil {
		return m.FinishTime
	}
	return ""
}

func (m *DoctorWorkingHours) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DoctorWorkingHours) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DoctorWorkingHours) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type ListDoctorWorkingHours struct {
	Dwh                  []*DoctorWorkingHours `protobuf:"bytes,1,rep,name=dwh,proto3" json:"dwh"`
	Count                int32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ListDoctorWorkingHours) Reset()         { *m = ListDoctorWorkingHours{} }
func (m *ListDoctorWorkingHours) String() string { return proto.CompactTextString(m) }
func (*ListDoctorWorkingHours) ProtoMessage()    {}
func (*ListDoctorWorkingHours) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f24b76898b6e348, []int{5}
}
func (m *ListDoctorWorkingHours) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListDoctorWorkingHours) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListDoctorWorkingHours.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListDoctorWorkingHours) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDoctorWorkingHours.Merge(m, src)
}
func (m *ListDoctorWorkingHours) XXX_Size() int {
	return m.Size()
}
func (m *ListDoctorWorkingHours) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDoctorWorkingHours.DiscardUnknown(m)
}

var xxx_messageInfo_ListDoctorWorkingHours proto.InternalMessageInfo

func (m *ListDoctorWorkingHours) GetDwh() []*DoctorWorkingHours {
	if m != nil {
		return m.Dwh
	}
	return nil
}

func (m *ListDoctorWorkingHours) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*GetReqInt)(nil), "healthcare.GetReqInt")
	proto.RegisterType((*DelReqInt)(nil), "healthcare.DelReqInt")
	proto.RegisterType((*StatusDoctorWorkingHours)(nil), "healthcare.StatusDoctorWorkingHours")
	proto.RegisterType((*GetAllDoctorWorkingHoursReq)(nil), "healthcare.GetAllDoctorWorkingHoursReq")
	proto.RegisterType((*DoctorWorkingHours)(nil), "healthcare.Doctor_working_hours")
	proto.RegisterType((*ListDoctorWorkingHours)(nil), "healthcare.ListDoctorWorkingHours")
}

func init() {
	proto.RegisterFile("healthcare-service/doctor_working_hours.proto", fileDescriptor_2f24b76898b6e348)
}

var fileDescriptor_2f24b76898b6e348 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x51, 0x6e, 0xda, 0x4c,
	0x10, 0xfe, 0x8d, 0x03, 0xb1, 0x07, 0xfd, 0x6d, 0xb5, 0x4a, 0x23, 0x93, 0x28, 0x14, 0x59, 0x55,
	0xcb, 0x4b, 0xa8, 0x44, 0x4f, 0x00, 0x45, 0x22, 0x48, 0x95, 0x2a, 0x39, 0x54, 0xbc, 0xc5, 0x5d,
	0xbc, 0x03, 0x5e, 0x61, 0x30, 0x59, 0x2f, 0x20, 0xde, 0x7a, 0x8c, 0xde, 0xa1, 0x17, 0xe9, 0x63,
	0x8f, 0x50, 0xd1, 0x23, 0xf4, 0x02, 0x95, 0x77, 0x9d, 0x02, 0x89, 0x51, 0xfa, 0xd2, 0x37, 0xcf,
	0xf7, 0xcd, 0xcc, 0xce, 0x7c, 0x9f, 0x77, 0xe1, 0x32, 0x44, 0x1a, 0xc9, 0x30, 0xa0, 0x02, 0x2f,
	0x13, 0x14, 0x4b, 0x1e, 0xe0, 0x1b, 0x16, 0x07, 0x32, 0x16, 0xfe, 0x2a, 0x16, 0x13, 0x3e, 0x1b,
	0xfb, 0x61, 0xbc, 0x10, 0x49, 0x63, 0x2e, 0x62, 0x19, 0x13, 0xd8, 0xa6, 0xbb, 0x7d, 0xb0, 0xbb,
	0x28, 0x3d, 0xbc, 0xed, 0xcd, 0x24, 0x39, 0x81, 0xe2, 0x88, 0x63, 0xc4, 0x1c, 0xa3, 0x66, 0xd4,
	0x6d, 0x4f, 0x07, 0x29, 0xba, 0xa4, 0xd1, 0x02, 0x9d, 0x82, 0x46, 0x55, 0x40, 0xce, 0xc1, 0xe6,
	0x89, 0x4f, 0x03, 0xc9, 0x97, 0xe8, 0x98, 0x35, 0xa3, 0x6e, 0x79, 0x16, 0x4f, 0x5a, 0x2a, 0x76,
	0x3f, 0x81, 0xdd, 0xc1, 0x28, 0xeb, 0xfa, 0x04, 0x0a, 0x5c, 0xb7, 0x2c, 0x7a, 0x05, 0xce, 0xf6,
	0x2b, 0x0b, 0xfb, 0x95, 0xe4, 0x15, 0x3c, 0xe5, 0x89, 0x1f, 0x52, 0xc1, 0x7c, 0x86, 0x11, 0x4a,
	0x64, 0x59, 0xf3, 0xff, 0x79, 0x72, 0x45, 0x05, 0xeb, 0x68, 0xd0, 0x6d, 0x82, 0x73, 0x2d, 0xa9,
	0x5c, 0x24, 0x1d, 0xb5, 0xe7, 0x40, 0xaf, 0x79, 0x95, 0x6e, 0x49, 0x4e, 0xa1, 0x94, 0x28, 0x4e,
	0x1d, 0x6a, 0x79, 0x59, 0xe4, 0x7e, 0x35, 0xe0, 0xbc, 0x8b, 0xb2, 0x15, 0x45, 0x0f, 0x8b, 0x3c,
	0xbc, 0x25, 0x04, 0x8e, 0xe6, 0x74, 0x8c, 0xaa, 0xca, 0xf4, 0xd4, 0x77, 0xba, 0x7c, 0xc4, 0xa7,
	0x5c, 0xaa, 0x41, 0x4d, 0x4f, 0x07, 0x5b, 0xa1, 0xcc, 0x5c, 0xa1, 0x8e, 0x76, 0x85, 0xaa, 0x80,
	0x15, 0x0b, 0x86, 0xc2, 0x1f, 0xae, 0x9d, 0xa2, 0x22, 0x8e, 0x55, 0xdc, 0x5e, 0xef, 0x2b, 0x51,
	0xba, 0xa7, 0xe1, 0xe7, 0x02, 0x9c, 0x74, 0x72, 0x4c, 0xcc, 0xd3, 0x33, 0x33, 0x9b, 0xb3, 0xcc,
	0x23, 0x4b, 0x03, 0x3d, 0x46, 0xaa, 0x50, 0x66, 0x74, 0xed, 0xc7, 0x23, 0x7f, 0x85, 0x38, 0xc9,
	0xe6, 0xb5, 0x19, 0x5d, 0x7f, 0x18, 0x0d, 0x10, 0x27, 0xe4, 0x02, 0x20, 0x91, 0x54, 0x48, 0x5f,
	0xf2, 0xe9, 0xdd, 0xe0, 0xb6, 0x42, 0xfa, 0x7c, 0x8a, 0xe4, 0x05, 0x94, 0x47, 0x7c, 0xc6, 0x93,
	0x50, 0xf3, 0x7a, 0x7e, 0xd0, 0x90, 0x4a, 0xb8, 0x00, 0x08, 0x04, 0x52, 0x89, 0xcc, 0xa7, 0x52,
	0xed, 0x60, 0x7b, 0x76, 0x86, 0xb4, 0x64, 0x4a, 0x2f, 0xe6, 0xec, 0x8e, 0x3e, 0xd6, 0x74, 0x86,
	0x68, 0x3a, 0x73, 0x39, 0xa5, 0xad, 0x6c, 0x38, 0x8d, 0xb4, 0xa4, 0x3b, 0x84, 0xd3, 0xf7, 0x3c,
	0x91, 0x39, 0x16, 0x37, 0xc1, 0x64, 0xab, 0xd0, 0x31, 0x6a, 0x66, 0xbd, 0xdc, 0xac, 0x35, 0xb6,
	0x3f, 0x74, 0x23, 0x4f, 0x32, 0x2f, 0x4d, 0x4e, 0xed, 0x09, 0xe2, 0xc5, 0x4c, 0x5b, 0x59, 0xf4,
	0x74, 0xd0, 0xfc, 0x65, 0x42, 0xe5, 0xe1, 0x01, 0xd7, 0xfa, 0x16, 0x91, 0x1b, 0x70, 0xde, 0xa9,
	0x65, 0x72, 0x66, 0x78, 0xf4, 0xd8, 0xb3, 0x47, 0x33, 0x48, 0x1f, 0x2a, 0x5d, 0xcc, 0x59, 0xb0,
	0xbd, 0xee, 0x31, 0xf2, 0x7c, 0xb7, 0xfc, 0xcf, 0x2d, 0xfd, 0x8b, 0xae, 0x63, 0x70, 0x0e, 0xfd,
	0xe7, 0xe4, 0xf5, 0xbd, 0xa6, 0x87, 0x6e, 0xc3, 0x99, 0xbb, 0x9b, 0x78, 0xc0, 0x86, 0x1b, 0x70,
	0x3e, 0x2a, 0x33, 0xff, 0x91, 0x3c, 0x03, 0x70, 0xf4, 0x85, 0xcf, 0xe9, 0x7f, 0x40, 0x9d, 0x97,
	0xbb, 0xf0, 0xa1, 0x27, 0xa2, 0xfd, 0xec, 0xdb, 0xa6, 0x6a, 0x7c, 0xdf, 0x54, 0x8d, 0x1f, 0x9b,
	0xaa, 0xf1, 0xe5, 0x67, 0xf5, 0xbf, 0x61, 0x49, 0xbd, 0x8d, 0x6f, 0x7f, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x54, 0xd2, 0xbf, 0x70, 0x4c, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoctorWorkingHoursServiceClient is the client API for DoctorWorkingHoursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoctorWorkingHoursServiceClient interface {
	CreateDoctorWorkingHours(ctx context.Context, in *DoctorWorkingHours, opts ...grpc.CallOption) (*DoctorWorkingHours, error)
	GetDoctorWorkingHoursById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*DoctorWorkingHours, error)
	GetAllDoctorWorkingHours(ctx context.Context, in *GetAllDoctorWorkingHoursReq, opts ...grpc.CallOption) (*ListDoctorWorkingHours, error)
	UpdateDoctorWorkingHours(ctx context.Context, in *DoctorWorkingHours, opts ...grpc.CallOption) (*DoctorWorkingHours, error)
	DeleteDoctorWorkingHours(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*StatusDoctorWorkingHours, error)
}

type doctorWorkingHoursServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorWorkingHoursServiceClient(cc *grpc.ClientConn) DoctorWorkingHoursServiceClient {
	return &doctorWorkingHoursServiceClient{cc}
}

func (c *doctorWorkingHoursServiceClient) CreateDoctorWorkingHours(ctx context.Context, in *DoctorWorkingHours, opts ...grpc.CallOption) (*DoctorWorkingHours, error) {
	out := new(DoctorWorkingHours)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorWorkingHoursService/CreateDoctorWorkingHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorWorkingHoursServiceClient) GetDoctorWorkingHoursById(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*DoctorWorkingHours, error) {
	out := new(DoctorWorkingHours)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorWorkingHoursService/GetDoctorWorkingHoursById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorWorkingHoursServiceClient) GetAllDoctorWorkingHours(ctx context.Context, in *GetAllDoctorWorkingHoursReq, opts ...grpc.CallOption) (*ListDoctorWorkingHours, error) {
	out := new(ListDoctorWorkingHours)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorWorkingHoursService/GetAllDoctorWorkingHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorWorkingHoursServiceClient) UpdateDoctorWorkingHours(ctx context.Context, in *DoctorWorkingHours, opts ...grpc.CallOption) (*DoctorWorkingHours, error) {
	out := new(DoctorWorkingHours)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorWorkingHoursService/UpdateDoctorWorkingHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorWorkingHoursServiceClient) DeleteDoctorWorkingHours(ctx context.Context, in *GetReqInt, opts ...grpc.CallOption) (*StatusDoctorWorkingHours, error) {
	out := new(StatusDoctorWorkingHours)
	err := c.cc.Invoke(ctx, "/healthcare.DoctorWorkingHoursService/DeleteDoctorWorkingHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorWorkingHoursServiceServer is the server API for DoctorWorkingHoursService service.
type DoctorWorkingHoursServiceServer interface {
	CreateDoctorWorkingHours(context.Context, *DoctorWorkingHours) (*DoctorWorkingHours, error)
	GetDoctorWorkingHoursById(context.Context, *GetReqInt) (*DoctorWorkingHours, error)
	GetAllDoctorWorkingHours(context.Context, *GetAllDoctorWorkingHoursReq) (*ListDoctorWorkingHours, error)
	UpdateDoctorWorkingHours(context.Context, *DoctorWorkingHours) (*DoctorWorkingHours, error)
	DeleteDoctorWorkingHours(context.Context, *GetReqInt) (*StatusDoctorWorkingHours, error)
}

// UnimplementedDoctorWorkingHoursServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDoctorWorkingHoursServiceServer struct {
}

func (*UnimplementedDoctorWorkingHoursServiceServer) CreateDoctorWorkingHours(ctx context.Context, req *DoctorWorkingHours) (*DoctorWorkingHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorWorkingHours not implemented")
}
func (*UnimplementedDoctorWorkingHoursServiceServer) GetDoctorWorkingHoursById(ctx context.Context, req *GetReqInt) (*DoctorWorkingHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorWorkingHoursById not implemented")
}
func (*UnimplementedDoctorWorkingHoursServiceServer) GetAllDoctorWorkingHours(ctx context.Context, req *GetAllDoctorWorkingHoursReq) (*ListDoctorWorkingHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDoctorWorkingHours not implemented")
}
func (*UnimplementedDoctorWorkingHoursServiceServer) UpdateDoctorWorkingHours(ctx context.Context, req *DoctorWorkingHours) (*DoctorWorkingHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorWorkingHours not implemented")
}
func (*UnimplementedDoctorWorkingHoursServiceServer) DeleteDoctorWorkingHours(ctx context.Context, req *GetReqInt) (*StatusDoctorWorkingHours, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorWorkingHours not implemented")
}

func RegisterDoctorWorkingHoursServiceServer(s *grpc.Server, srv DoctorWorkingHoursServiceServer) {
	s.RegisterService(&_DoctorWorkingHoursService_serviceDesc, srv)
}

func _DoctorWorkingHoursService_CreateDoctorWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorWorkingHours)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorWorkingHoursServiceServer).CreateDoctorWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorWorkingHoursService/CreateDoctorWorkingHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorWorkingHoursServiceServer).CreateDoctorWorkingHours(ctx, req.(*DoctorWorkingHours))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorWorkingHoursService_GetDoctorWorkingHoursById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorWorkingHoursServiceServer).GetDoctorWorkingHoursById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorWorkingHoursService/GetDoctorWorkingHoursById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorWorkingHoursServiceServer).GetDoctorWorkingHoursById(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorWorkingHoursService_GetAllDoctorWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDoctorWorkingHoursReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorWorkingHoursServiceServer).GetAllDoctorWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorWorkingHoursService/GetAllDoctorWorkingHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorWorkingHoursServiceServer).GetAllDoctorWorkingHours(ctx, req.(*GetAllDoctorWorkingHoursReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorWorkingHoursService_UpdateDoctorWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoctorWorkingHours)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorWorkingHoursServiceServer).UpdateDoctorWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorWorkingHoursService/UpdateDoctorWorkingHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorWorkingHoursServiceServer).UpdateDoctorWorkingHours(ctx, req.(*DoctorWorkingHours))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorWorkingHoursService_DeleteDoctorWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorWorkingHoursServiceServer).DeleteDoctorWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/healthcare.DoctorWorkingHoursService/DeleteDoctorWorkingHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorWorkingHoursServiceServer).DeleteDoctorWorkingHours(ctx, req.(*GetReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorWorkingHoursService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "healthcare.DoctorWorkingHoursService",
	HandlerType: (*DoctorWorkingHoursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorWorkingHours",
			Handler:    _DoctorWorkingHoursService_CreateDoctorWorkingHours_Handler,
		},
		{
			MethodName: "GetDoctorWorkingHoursById",
			Handler:    _DoctorWorkingHoursService_GetDoctorWorkingHoursById_Handler,
		},
		{
			MethodName: "GetAllDoctorWorkingHours",
			Handler:    _DoctorWorkingHoursService_GetAllDoctorWorkingHours_Handler,
		},
		{
			MethodName: "UpdateDoctorWorkingHours",
			Handler:    _DoctorWorkingHoursService_UpdateDoctorWorkingHours_Handler,
		},
		{
			MethodName: "DeleteDoctorWorkingHours",
			Handler:    _DoctorWorkingHoursService_DeleteDoctorWorkingHours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "healthcare-service/doctor_working_hours.proto",
}

func (m *GetReqInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetReqInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetReqInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelReqInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelReqInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelReqInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsHardDeleted {
		i--
		if m.IsHardDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StatusDoctorWorkingHours) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusDoctorWorkingHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusDoctorWorkingHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllDoctorWorkingHoursReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllDoctorWorkingHoursReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllDoctorWorkingHoursReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DoctorWorkingHours) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorWorkingHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorWorkingHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FinishTime) > 0 {
		i -= len(m.FinishTime)
		copy(dAtA[i:], m.FinishTime)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.FinishTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DayOfWeek) > 0 {
		i -= len(m.DayOfWeek)
		copy(dAtA[i:], m.DayOfWeek)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.DayOfWeek)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListDoctorWorkingHours) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDoctorWorkingHours) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListDoctorWorkingHours) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Count != 0 {
		i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Dwh) > 0 {
		for iNdEx := len(m.Dwh) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dwh[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDoctorWorkingHours(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDoctorWorkingHours(dAtA []byte, offset int, v uint64) int {
	offset -= sovDoctorWorkingHours(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetReqInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelReqInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDoctorWorkingHours(uint64(m.Id))
	}
	if m.IsActive {
		n += 2
	}
	if m.IsHardDeleted {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusDoctorWorkingHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllDoctorWorkingHoursReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovDoctorWorkingHours(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovDoctorWorkingHours(uint64(m.Limit))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorWorkingHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDoctorWorkingHours(uint64(m.Id))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.DayOfWeek)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.FinishTime)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovDoctorWorkingHours(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListDoctorWorkingHours) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dwh) > 0 {
		for _, e := range m.Dwh {
			l = e.Size()
			n += 1 + l + sovDoctorWorkingHours(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovDoctorWorkingHours(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDoctorWorkingHours(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDoctorWorkingHours(x uint64) (n int) {
	return sovDoctorWorkingHours(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetReqInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorWorkingHours
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetReqInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetReqInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorWorkingHours(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelReqInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorWorkingHours
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelReqInt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelReqInt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHardDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHardDeleted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorWorkingHours(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusDoctorWorkingHours) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorWorkingHours
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusDoctorWorkingHours: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusDoctorWorkingHours: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorWorkingHours(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllDoctorWorkingHoursReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorWorkingHours
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllDoctorWorkingHoursReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllDoctorWorkingHoursReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorWorkingHours(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorWorkingHours) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorWorkingHours
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Doctor_working_hours: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Doctor_working_hours: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayOfWeek", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DayOfWeek = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FinishTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorWorkingHours(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDoctorWorkingHours) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorWorkingHours
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDoctorWorkingHours: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDoctorWorkingHours: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dwh", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dwh = append(m.Dwh, &DoctorWorkingHours{})
			if err := m.Dwh[len(m.Dwh)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorWorkingHours(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorWorkingHours
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDoctorWorkingHours(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDoctorWorkingHours
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorWorkingHours
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDoctorWorkingHours
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDoctorWorkingHours
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDoctorWorkingHours
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDoctorWorkingHours        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDoctorWorkingHours          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDoctorWorkingHours = fmt.Errorf("proto: unexpected end of group")
)
