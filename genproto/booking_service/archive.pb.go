// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booking_service/archive.proto

package booking_service

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Archive struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	DoctorAvailabilityId int64    `protobuf:"varint,2,opt,name=doctor_availability_id,json=doctorAvailabilityId,proto3" json:"doctor_availability_id"`
	StartTime            string   `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              string   `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	PatientProblem       string   `protobuf:"bytes,5,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	Status               string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status"`
	PaymentType          string   `protobuf:"bytes,7,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`
	PaymentAmount        float32  `protobuf:"fixed32,8,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount"`
	CreatedAt            string   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,11,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Archive) Reset()         { *m = Archive{} }
func (m *Archive) String() string { return proto.CompactTextString(m) }
func (*Archive) ProtoMessage()    {}
func (*Archive) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b57b3fb89da7a89, []int{0}
}
func (m *Archive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Archive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Archive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Archive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archive.Merge(m, src)
}
func (m *Archive) XXX_Size() int {
	return m.Size()
}
func (m *Archive) XXX_DiscardUnknown() {
	xxx_messageInfo_Archive.DiscardUnknown(m)
}

var xxx_messageInfo_Archive proto.InternalMessageInfo

func (m *Archive) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Archive) GetDoctorAvailabilityId() int64 {
	if m != nil {
		return m.DoctorAvailabilityId
	}
	return 0
}

func (m *Archive) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *Archive) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *Archive) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *Archive) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Archive) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *Archive) GetPaymentAmount() float32 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

func (m *Archive) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Archive) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Archive) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type Archives struct {
	Count                int64      `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Archives             []*Archive `protobuf:"bytes,2,rep,name=archives,proto3" json:"archives"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Archives) Reset()         { *m = Archives{} }
func (m *Archives) String() string { return proto.CompactTextString(m) }
func (*Archives) ProtoMessage()    {}
func (*Archives) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b57b3fb89da7a89, []int{1}
}
func (m *Archives) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Archives) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Archives.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Archives) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Archives.Merge(m, src)
}
func (m *Archives) XXX_Size() int {
	return m.Size()
}
func (m *Archives) XXX_DiscardUnknown() {
	xxx_messageInfo_Archives.DiscardUnknown(m)
}

var xxx_messageInfo_Archives proto.InternalMessageInfo

func (m *Archives) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Archives) GetArchives() []*Archive {
	if m != nil {
		return m.Archives
	}
	return nil
}

type CreateArchiveReq struct {
	DoctorAvailabilityId int64    `protobuf:"varint,1,opt,name=doctor_availability_id,json=doctorAvailabilityId,proto3" json:"doctor_availability_id"`
	StartTime            string   `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              string   `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	PatientProblem       string   `protobuf:"bytes,4,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	Status               string   `protobuf:"bytes,5,opt,name=status,proto3" json:"status"`
	PaymentType          string   `protobuf:"bytes,6,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`
	PaymentAmount        float32  `protobuf:"fixed32,7,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateArchiveReq) Reset()         { *m = CreateArchiveReq{} }
func (m *CreateArchiveReq) String() string { return proto.CompactTextString(m) }
func (*CreateArchiveReq) ProtoMessage()    {}
func (*CreateArchiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b57b3fb89da7a89, []int{2}
}
func (m *CreateArchiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateArchiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateArchiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateArchiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateArchiveReq.Merge(m, src)
}
func (m *CreateArchiveReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateArchiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateArchiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateArchiveReq proto.InternalMessageInfo

func (m *CreateArchiveReq) GetDoctorAvailabilityId() int64 {
	if m != nil {
		return m.DoctorAvailabilityId
	}
	return 0
}

func (m *CreateArchiveReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *CreateArchiveReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *CreateArchiveReq) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *CreateArchiveReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CreateArchiveReq) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *CreateArchiveReq) GetPaymentAmount() float32 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

type UpdateArchiveReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	DoctorAvailabilityId int64    `protobuf:"varint,3,opt,name=doctor_availability_id,json=doctorAvailabilityId,proto3" json:"doctor_availability_id"`
	StartTime            string   `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              string   `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	PatientProblem       string   `protobuf:"bytes,6,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	Status               string   `protobuf:"bytes,7,opt,name=status,proto3" json:"status"`
	PaymentType          string   `protobuf:"bytes,8,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`
	PaymentAmount        float32  `protobuf:"fixed32,9,opt,name=payment_amount,json=paymentAmount,proto3" json:"payment_amount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateArchiveReq) Reset()         { *m = UpdateArchiveReq{} }
func (m *UpdateArchiveReq) String() string { return proto.CompactTextString(m) }
func (*UpdateArchiveReq) ProtoMessage()    {}
func (*UpdateArchiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b57b3fb89da7a89, []int{3}
}
func (m *UpdateArchiveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateArchiveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateArchiveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateArchiveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateArchiveReq.Merge(m, src)
}
func (m *UpdateArchiveReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateArchiveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateArchiveReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateArchiveReq proto.InternalMessageInfo

func (m *UpdateArchiveReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateArchiveReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateArchiveReq) GetDoctorAvailabilityId() int64 {
	if m != nil {
		return m.DoctorAvailabilityId
	}
	return 0
}

func (m *UpdateArchiveReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *UpdateArchiveReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *UpdateArchiveReq) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *UpdateArchiveReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *UpdateArchiveReq) GetPaymentType() string {
	if m != nil {
		return m.PaymentType
	}
	return ""
}

func (m *UpdateArchiveReq) GetPaymentAmount() float32 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

type ArchiveFieldValueReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ArchiveFieldValueReq) Reset()         { *m = ArchiveFieldValueReq{} }
func (m *ArchiveFieldValueReq) String() string { return proto.CompactTextString(m) }
func (*ArchiveFieldValueReq) ProtoMessage()    {}
func (*ArchiveFieldValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b57b3fb89da7a89, []int{4}
}
func (m *ArchiveFieldValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchiveFieldValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchiveFieldValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchiveFieldValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchiveFieldValueReq.Merge(m, src)
}
func (m *ArchiveFieldValueReq) XXX_Size() int {
	return m.Size()
}
func (m *ArchiveFieldValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchiveFieldValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_ArchiveFieldValueReq proto.InternalMessageInfo

func (m *ArchiveFieldValueReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *ArchiveFieldValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ArchiveFieldValueReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type DeleteArchiveStatus struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteArchiveStatus) Reset()         { *m = DeleteArchiveStatus{} }
func (m *DeleteArchiveStatus) String() string { return proto.CompactTextString(m) }
func (*DeleteArchiveStatus) ProtoMessage()    {}
func (*DeleteArchiveStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b57b3fb89da7a89, []int{5}
}
func (m *DeleteArchiveStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteArchiveStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteArchiveStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteArchiveStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteArchiveStatus.Merge(m, src)
}
func (m *DeleteArchiveStatus) XXX_Size() int {
	return m.Size()
}
func (m *DeleteArchiveStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteArchiveStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteArchiveStatus proto.InternalMessageInfo

func (m *DeleteArchiveStatus) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllArchivesReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	Page                 uint64   `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Limit                uint64   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllArchivesReq) Reset()         { *m = GetAllArchivesReq{} }
func (m *GetAllArchivesReq) String() string { return proto.CompactTextString(m) }
func (*GetAllArchivesReq) ProtoMessage()    {}
func (*GetAllArchivesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b57b3fb89da7a89, []int{6}
}
func (m *GetAllArchivesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllArchivesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllArchivesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllArchivesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllArchivesReq.Merge(m, src)
}
func (m *GetAllArchivesReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllArchivesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllArchivesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllArchivesReq proto.InternalMessageInfo

func (m *GetAllArchivesReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllArchivesReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllArchivesReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetAllArchivesReq) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllArchivesReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllArchivesReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func init() {
	proto.RegisterType((*Archive)(nil), "booking_service.Archive")
	proto.RegisterType((*Archives)(nil), "booking_service.Archives")
	proto.RegisterType((*CreateArchiveReq)(nil), "booking_service.CreateArchiveReq")
	proto.RegisterType((*UpdateArchiveReq)(nil), "booking_service.UpdateArchiveReq")
	proto.RegisterType((*ArchiveFieldValueReq)(nil), "booking_service.ArchiveFieldValueReq")
	proto.RegisterType((*DeleteArchiveStatus)(nil), "booking_service.DeleteArchiveStatus")
	proto.RegisterType((*GetAllArchivesReq)(nil), "booking_service.GetAllArchivesReq")
}

func init() { proto.RegisterFile("booking_service/archive.proto", fileDescriptor_9b57b3fb89da7a89) }

var fileDescriptor_9b57b3fb89da7a89 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4f, 0x6e, 0xd3, 0x4e,
	0x18, 0xfd, 0xf9, 0x4f, 0x62, 0xfb, 0xcb, 0x2f, 0x69, 0x18, 0xa2, 0xca, 0x2d, 0x6a, 0x94, 0x5a,
	0x54, 0x64, 0x43, 0x90, 0x4a, 0x2f, 0xe0, 0x82, 0x40, 0x48, 0x20, 0x90, 0x29, 0x5d, 0x21, 0x59,
	0x13, 0x7b, 0x28, 0x23, 0xec, 0xd8, 0xd8, 0x93, 0x48, 0x3e, 0x04, 0x7b, 0xb6, 0x6c, 0xb9, 0x01,
	0x37, 0x60, 0xc9, 0x11, 0x50, 0x38, 0x01, 0x37, 0x40, 0x9e, 0x19, 0x43, 0xf3, 0xcf, 0x09, 0x12,
	0xbb, 0x7c, 0xef, 0x7d, 0x99, 0xcc, 0x7b, 0x6f, 0x9e, 0x02, 0x47, 0xe3, 0x24, 0x79, 0x47, 0x27,
	0x57, 0x7e, 0x4e, 0xb2, 0x19, 0x0d, 0xc8, 0x3d, 0x9c, 0x05, 0x6f, 0xe9, 0x8c, 0x8c, 0xd2, 0x2c,
	0x61, 0x09, 0xda, 0x5b, 0xa2, 0x9d, 0x9f, 0x2a, 0x18, 0xae, 0x58, 0x41, 0x1d, 0x50, 0x69, 0x68,
	0x2b, 0x03, 0x65, 0xa8, 0x79, 0x2a, 0x0d, 0xd1, 0x19, 0xec, 0x87, 0x49, 0xc0, 0x92, 0xcc, 0xc7,
	0x33, 0x4c, 0x23, 0x3c, 0xa6, 0x11, 0x65, 0x85, 0x4f, 0x43, 0x5b, 0xe5, 0x3b, 0x3d, 0xc1, 0xba,
	0xd7, 0xc8, 0x27, 0x21, 0x3a, 0x02, 0xc8, 0x19, 0xce, 0x98, 0xcf, 0x68, 0x4c, 0x6c, 0x6d, 0xa0,
	0x0c, 0x2d, 0xcf, 0xe2, 0xc8, 0x05, 0x8d, 0x09, 0x3a, 0x00, 0x93, 0x4c, 0x42, 0x41, 0xea, 0x9c,
	0x34, 0xc8, 0x24, 0xe4, 0xd4, 0x1d, 0xd8, 0x4b, 0x31, 0xa3, 0x64, 0xc2, 0xfc, 0x34, 0x4b, 0xc6,
	0x11, 0x89, 0xed, 0x06, 0xdf, 0xe8, 0x48, 0xf8, 0x85, 0x40, 0xd1, 0x3e, 0x34, 0x73, 0x86, 0xd9,
	0x34, 0xb7, 0x9b, 0x9c, 0x97, 0x13, 0x3a, 0x86, 0xff, 0x53, 0x5c, 0xc4, 0xe5, 0x01, 0xac, 0x48,
	0x89, 0x6d, 0x70, 0xb6, 0x25, 0xb1, 0x8b, 0x22, 0x25, 0xe8, 0x04, 0x3a, 0xd5, 0x0a, 0x8e, 0x93,
	0xe9, 0x84, 0xd9, 0xe6, 0x40, 0x19, 0xaa, 0x5e, 0x5b, 0xa2, 0x2e, 0x07, 0x4b, 0x11, 0x41, 0x46,
	0x30, 0x23, 0xa1, 0x8f, 0x99, 0x6d, 0x09, 0x11, 0x12, 0x71, 0x39, 0x3d, 0x4d, 0xc3, 0x8a, 0x06,
	0x41, 0x4b, 0x44, 0xd0, 0x21, 0x89, 0x88, 0xa4, 0x5b, 0x82, 0x96, 0x88, 0xcb, 0x9c, 0x4b, 0x30,
	0xa5, 0xe5, 0x39, 0xea, 0x41, 0x23, 0xe0, 0xd7, 0x10, 0xb6, 0x8b, 0x01, 0x9d, 0x81, 0x29, 0x73,
	0xcb, 0x6d, 0x75, 0xa0, 0x0d, 0x5b, 0xa7, 0xf6, 0x68, 0x29, 0xb9, 0x91, 0x3c, 0xc2, 0xfb, 0xbd,
	0xe9, 0x7c, 0x50, 0xa1, 0xfb, 0x80, 0xdf, 0xb1, 0xe2, 0xc8, 0xfb, 0x9a, 0x10, 0x95, 0x9d, 0x43,
	0x54, 0xeb, 0x42, 0xd4, 0xb6, 0x86, 0xa8, 0x6f, 0x09, 0xb1, 0x51, 0x1b, 0x62, 0x73, 0x97, 0x10,
	0x8d, 0x35, 0x21, 0x3a, 0x5f, 0x54, 0xe8, 0xbe, 0xe2, 0xa1, 0x5c, 0xf3, 0xa3, 0x07, 0x8d, 0x37,
	0x94, 0x44, 0x42, 0xbe, 0xe5, 0x89, 0xa1, 0x44, 0x67, 0x38, 0x9a, 0x56, 0x52, 0xc5, 0x50, 0xe3,
	0x9d, 0xb6, 0xb3, 0x77, 0x7a, 0x9d, 0x77, 0x8d, 0xad, 0xde, 0x35, 0xb7, 0x78, 0x67, 0xd4, 0x7a,
	0x67, 0xee, 0xe2, 0x9d, 0xb5, 0xce, 0x3b, 0x1f, 0x7a, 0xd2, 0xb4, 0x47, 0xa5, 0x41, 0x97, 0xa5,
	0x1f, 0x7f, 0x6b, 0xdf, 0x2d, 0xb0, 0x68, 0xee, 0xe3, 0x80, 0xd1, 0x99, 0x78, 0x26, 0xa6, 0x67,
	0xd2, 0xdc, 0xe5, 0xb3, 0x73, 0x17, 0x6e, 0x3e, 0xe4, 0x8d, 0x90, 0x3f, 0xf3, 0x52, 0x28, 0xf8,
	0xa3, 0x4c, 0xe1, 0x5f, 0x90, 0x93, 0xf3, 0x49, 0x81, 0x1b, 0x8f, 0x09, 0x73, 0xa3, 0xa8, 0xaa,
	0xce, 0xbf, 0xbc, 0x0d, 0x42, 0xa0, 0xa7, 0xf8, 0x4a, 0xa4, 0xa5, 0x7b, 0xfc, 0x73, 0x79, 0x4c,
	0x44, 0x63, 0xca, 0x78, 0x4a, 0xba, 0x27, 0x86, 0x32, 0xbe, 0x24, 0x0b, 0x49, 0xe6, 0x8f, 0x0b,
	0x19, 0x8e, 0xc1, 0xe7, 0xf3, 0xe2, 0xf4, 0xb3, 0x06, 0x9d, 0x4a, 0x8d, 0x28, 0x29, 0x7a, 0x0a,
	0xed, 0x85, 0x46, 0xa2, 0xe3, 0x95, 0x1e, 0x2f, 0x37, 0xf6, 0x70, 0x63, 0xd5, 0xd1, 0x33, 0x80,
	0xd2, 0x03, 0x39, 0x9d, 0x6c, 0xda, 0x5b, 0x48, 0xac, 0xe6, 0xb8, 0xe7, 0xd0, 0x59, 0xb4, 0x14,
	0x39, 0x2b, 0xbb, 0x2b, 0x9e, 0x1f, 0x1e, 0x6c, 0x3a, 0x2f, 0x2f, 0xd5, 0x2e, 0xf4, 0x6d, 0x8d,
	0xda, 0xe5, 0x3e, 0xd6, 0x5c, 0xef, 0x35, 0xb4, 0x17, 0x5e, 0xc8, 0xae, 0x82, 0x6f, 0xaf, 0xac,
	0xad, 0x79, 0x68, 0xe7, 0xdd, 0xaf, 0xf3, 0xbe, 0xf2, 0x6d, 0xde, 0x57, 0xbe, 0xcf, 0xfb, 0xca,
	0xc7, 0x1f, 0xfd, 0xff, 0xc6, 0x4d, 0xfe, 0x17, 0x79, 0xff, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xaa, 0xf6, 0x01, 0xff, 0x43, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArchiveServiceClient is the client API for ArchiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchiveServiceClient interface {
	// archive
	CreateArchive(ctx context.Context, in *CreateArchiveReq, opts ...grpc.CallOption) (*Archive, error)
	GetArchive(ctx context.Context, in *ArchiveFieldValueReq, opts ...grpc.CallOption) (*Archive, error)
	GetAllArchives(ctx context.Context, in *GetAllArchivesReq, opts ...grpc.CallOption) (*Archives, error)
	UpdateArchive(ctx context.Context, in *UpdateArchiveReq, opts ...grpc.CallOption) (*Archive, error)
	DeleteArchive(ctx context.Context, in *ArchiveFieldValueReq, opts ...grpc.CallOption) (*DeleteArchiveStatus, error)
}

type archiveServiceClient struct {
	cc *grpc.ClientConn
}

func NewArchiveServiceClient(cc *grpc.ClientConn) ArchiveServiceClient {
	return &archiveServiceClient{cc}
}

func (c *archiveServiceClient) CreateArchive(ctx context.Context, in *CreateArchiveReq, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/CreateArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) GetArchive(ctx context.Context, in *ArchiveFieldValueReq, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/GetArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) GetAllArchives(ctx context.Context, in *GetAllArchivesReq, opts ...grpc.CallOption) (*Archives, error) {
	out := new(Archives)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/GetAllArchives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) UpdateArchive(ctx context.Context, in *UpdateArchiveReq, opts ...grpc.CallOption) (*Archive, error) {
	out := new(Archive)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/UpdateArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) DeleteArchive(ctx context.Context, in *ArchiveFieldValueReq, opts ...grpc.CallOption) (*DeleteArchiveStatus, error) {
	out := new(DeleteArchiveStatus)
	err := c.cc.Invoke(ctx, "/booking_service.ArchiveService/DeleteArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveServiceServer is the server API for ArchiveService service.
type ArchiveServiceServer interface {
	// archive
	CreateArchive(context.Context, *CreateArchiveReq) (*Archive, error)
	GetArchive(context.Context, *ArchiveFieldValueReq) (*Archive, error)
	GetAllArchives(context.Context, *GetAllArchivesReq) (*Archives, error)
	UpdateArchive(context.Context, *UpdateArchiveReq) (*Archive, error)
	DeleteArchive(context.Context, *ArchiveFieldValueReq) (*DeleteArchiveStatus, error)
}

// UnimplementedArchiveServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArchiveServiceServer struct {
}

func (*UnimplementedArchiveServiceServer) CreateArchive(ctx context.Context, req *CreateArchiveReq) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArchive not implemented")
}
func (*UnimplementedArchiveServiceServer) GetArchive(ctx context.Context, req *ArchiveFieldValueReq) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchive not implemented")
}
func (*UnimplementedArchiveServiceServer) GetAllArchives(ctx context.Context, req *GetAllArchivesReq) (*Archives, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArchives not implemented")
}
func (*UnimplementedArchiveServiceServer) UpdateArchive(ctx context.Context, req *UpdateArchiveReq) (*Archive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArchive not implemented")
}
func (*UnimplementedArchiveServiceServer) DeleteArchive(ctx context.Context, req *ArchiveFieldValueReq) (*DeleteArchiveStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArchive not implemented")
}

func RegisterArchiveServiceServer(s *grpc.Server, srv ArchiveServiceServer) {
	s.RegisterService(&_ArchiveService_serviceDesc, srv)
}

func _ArchiveService_CreateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).CreateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/CreateArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).CreateArchive(ctx, req.(*CreateArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_GetArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).GetArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/GetArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).GetArchive(ctx, req.(*ArchiveFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_GetAllArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllArchivesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).GetAllArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/GetAllArchives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).GetAllArchives(ctx, req.(*GetAllArchivesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_UpdateArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArchiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).UpdateArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/UpdateArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).UpdateArchive(ctx, req.(*UpdateArchiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_DeleteArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).DeleteArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.ArchiveService/DeleteArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).DeleteArchive(ctx, req.(*ArchiveFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArchiveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.ArchiveService",
	HandlerType: (*ArchiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArchive",
			Handler:    _ArchiveService_CreateArchive_Handler,
		},
		{
			MethodName: "GetArchive",
			Handler:    _ArchiveService_GetArchive_Handler,
		},
		{
			MethodName: "GetAllArchives",
			Handler:    _ArchiveService_GetAllArchives_Handler,
		},
		{
			MethodName: "UpdateArchive",
			Handler:    _ArchiveService_UpdateArchive_Handler,
		},
		{
			MethodName: "DeleteArchive",
			Handler:    _ArchiveService_DeleteArchive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/archive.proto",
}

func (m *Archive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Archive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Archive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PaymentAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PaymentAmount))))
		i--
		dAtA[i] = 0x45
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DoctorAvailabilityId != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.DoctorAvailabilityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Archives) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Archives) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Archives) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Archives) > 0 {
		for iNdEx := len(m.Archives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Archives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintArchive(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateArchiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateArchiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateArchiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaymentAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PaymentAmount))))
		i--
		dAtA[i] = 0x3d
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x12
	}
	if m.DoctorAvailabilityId != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.DoctorAvailabilityId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateArchiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateArchiveReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateArchiveReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PaymentAmount != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PaymentAmount))))
		i--
		dAtA[i] = 0x4d
	}
	if len(m.PaymentType) > 0 {
		i -= len(m.PaymentType)
		copy(dAtA[i:], m.PaymentType)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.PaymentType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x22
	}
	if m.DoctorAvailabilityId != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.DoctorAvailabilityId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchiveFieldValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchiveFieldValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchiveFieldValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteArchiveStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteArchiveStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteArchiveStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllArchivesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllArchivesReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllArchivesReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintArchive(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintArchive(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintArchive(dAtA []byte, offset int, v uint64) int {
	offset -= sovArchive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Archive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArchive(uint64(m.Id))
	}
	if m.DoctorAvailabilityId != 0 {
		n += 1 + sovArchive(uint64(m.DoctorAvailabilityId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.PaymentAmount != 0 {
		n += 5
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Archives) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovArchive(uint64(m.Count))
	}
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovArchive(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateArchiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DoctorAvailabilityId != 0 {
		n += 1 + sovArchive(uint64(m.DoctorAvailabilityId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.PaymentAmount != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateArchiveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.DoctorAvailabilityId != 0 {
		n += 1 + sovArchive(uint64(m.DoctorAvailabilityId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.PaymentAmount != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ArchiveFieldValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteArchiveStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllArchivesReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.Page != 0 {
		n += 1 + sovArchive(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovArchive(uint64(m.Limit))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovArchive(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovArchive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArchive(x uint64) (n int) {
	return sovArchive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Archive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Archive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Archive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailabilityId", wireType)
			}
			m.DoctorAvailabilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoctorAvailabilityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PaymentAmount = float32(math.Float32frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Archives) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Archives: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Archives: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &Archive{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateArchiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateArchiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateArchiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailabilityId", wireType)
			}
			m.DoctorAvailabilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoctorAvailabilityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PaymentAmount = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateArchiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateArchiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateArchiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorAvailabilityId", wireType)
			}
			m.DoctorAvailabilityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoctorAvailabilityId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PaymentAmount = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchiveFieldValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchiveFieldValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchiveFieldValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteArchiveStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteArchiveStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteArchiveStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllArchivesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllArchivesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllArchivesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArchive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArchive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArchive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArchive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArchive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArchive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArchive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArchive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArchive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArchive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArchive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArchive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArchive = fmt.Errorf("proto: unexpected end of group")
)
