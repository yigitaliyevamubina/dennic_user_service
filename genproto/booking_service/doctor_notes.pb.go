// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booking_service/doctor_notes.proto

package booking_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DoctorNote struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	AppointmentId        int64    `protobuf:"varint,2,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	DoctorId             string   `protobuf:"bytes,3,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,4,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	Prescription         string   `protobuf:"bytes,5,opt,name=prescription,proto3" json:"prescription"`
	CreatedAt            string   `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DoctorNote) Reset()         { *m = DoctorNote{} }
func (m *DoctorNote) String() string { return proto.CompactTextString(m) }
func (*DoctorNote) ProtoMessage()    {}
func (*DoctorNote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7cb9d02c1f873f, []int{0}
}
func (m *DoctorNote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorNote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorNote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorNote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorNote.Merge(m, src)
}
func (m *DoctorNote) XXX_Size() int {
	return m.Size()
}
func (m *DoctorNote) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorNote.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorNote proto.InternalMessageInfo

func (m *DoctorNote) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DoctorNote) GetAppointmentId() int64 {
	if m != nil {
		return m.AppointmentId
	}
	return 0
}

func (m *DoctorNote) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *DoctorNote) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *DoctorNote) GetPrescription() string {
	if m != nil {
		return m.Prescription
	}
	return ""
}

func (m *DoctorNote) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *DoctorNote) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *DoctorNote) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type DoctorNotes struct {
	Count                int64         `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	DoctorNotes          []*DoctorNote `protobuf:"bytes,2,rep,name=doctor_notes,json=doctorNotes,proto3" json:"doctor_notes"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DoctorNotes) Reset()         { *m = DoctorNotes{} }
func (m *DoctorNotes) String() string { return proto.CompactTextString(m) }
func (*DoctorNotes) ProtoMessage()    {}
func (*DoctorNotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7cb9d02c1f873f, []int{1}
}
func (m *DoctorNotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DoctorNotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DoctorNotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DoctorNotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DoctorNotes.Merge(m, src)
}
func (m *DoctorNotes) XXX_Size() int {
	return m.Size()
}
func (m *DoctorNotes) XXX_DiscardUnknown() {
	xxx_messageInfo_DoctorNotes.DiscardUnknown(m)
}

var xxx_messageInfo_DoctorNotes proto.InternalMessageInfo

func (m *DoctorNotes) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DoctorNotes) GetDoctorNotes() []*DoctorNote {
	if m != nil {
		return m.DoctorNotes
	}
	return nil
}

type CreateDoctorNoteReq struct {
	AppointmentId        int64    `protobuf:"varint,1,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	DoctorId             string   `protobuf:"bytes,2,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,3,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	Prescription         string   `protobuf:"bytes,4,opt,name=prescription,proto3" json:"prescription"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDoctorNoteReq) Reset()         { *m = CreateDoctorNoteReq{} }
func (m *CreateDoctorNoteReq) String() string { return proto.CompactTextString(m) }
func (*CreateDoctorNoteReq) ProtoMessage()    {}
func (*CreateDoctorNoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7cb9d02c1f873f, []int{2}
}
func (m *CreateDoctorNoteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDoctorNoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDoctorNoteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDoctorNoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDoctorNoteReq.Merge(m, src)
}
func (m *CreateDoctorNoteReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateDoctorNoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDoctorNoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDoctorNoteReq proto.InternalMessageInfo

func (m *CreateDoctorNoteReq) GetAppointmentId() int64 {
	if m != nil {
		return m.AppointmentId
	}
	return 0
}

func (m *CreateDoctorNoteReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *CreateDoctorNoteReq) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *CreateDoctorNoteReq) GetPrescription() string {
	if m != nil {
		return m.Prescription
	}
	return ""
}

type UpdateDoctorNoteReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	AppointmentId        int64    `protobuf:"varint,3,opt,name=appointment_id,json=appointmentId,proto3" json:"appointment_id"`
	DoctorId             string   `protobuf:"bytes,4,opt,name=doctor_id,json=doctorId,proto3" json:"doctor_id"`
	PatientId            string   `protobuf:"bytes,5,opt,name=patient_id,json=patientId,proto3" json:"patient_id"`
	Prescription         string   `protobuf:"bytes,6,opt,name=prescription,proto3" json:"prescription"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateDoctorNoteReq) Reset()         { *m = UpdateDoctorNoteReq{} }
func (m *UpdateDoctorNoteReq) String() string { return proto.CompactTextString(m) }
func (*UpdateDoctorNoteReq) ProtoMessage()    {}
func (*UpdateDoctorNoteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7cb9d02c1f873f, []int{3}
}
func (m *UpdateDoctorNoteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateDoctorNoteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateDoctorNoteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateDoctorNoteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDoctorNoteReq.Merge(m, src)
}
func (m *UpdateDoctorNoteReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateDoctorNoteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDoctorNoteReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDoctorNoteReq proto.InternalMessageInfo

func (m *UpdateDoctorNoteReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetAppointmentId() int64 {
	if m != nil {
		return m.AppointmentId
	}
	return 0
}

func (m *UpdateDoctorNoteReq) GetDoctorId() string {
	if m != nil {
		return m.DoctorId
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetPatientId() string {
	if m != nil {
		return m.PatientId
	}
	return ""
}

func (m *UpdateDoctorNoteReq) GetPrescription() string {
	if m != nil {
		return m.Prescription
	}
	return ""
}

type FieldValueReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldValueReq) Reset()         { *m = FieldValueReq{} }
func (m *FieldValueReq) String() string { return proto.CompactTextString(m) }
func (*FieldValueReq) ProtoMessage()    {}
func (*FieldValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7cb9d02c1f873f, []int{4}
}
func (m *FieldValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FieldValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValueReq.Merge(m, src)
}
func (m *FieldValueReq) XXX_Size() int {
	return m.Size()
}
func (m *FieldValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValueReq proto.InternalMessageInfo

func (m *FieldValueReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *FieldValueReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type StatusRes struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRes) Reset()         { *m = StatusRes{} }
func (m *StatusRes) String() string { return proto.CompactTextString(m) }
func (*StatusRes) ProtoMessage()    {}
func (*StatusRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7cb9d02c1f873f, []int{5}
}
func (m *StatusRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatusRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatusRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatusRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRes.Merge(m, src)
}
func (m *StatusRes) XXX_Size() int {
	return m.Size()
}
func (m *StatusRes) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRes.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRes proto.InternalMessageInfo

func (m *StatusRes) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	Page                 uint64   `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Limit                uint64   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllReq) Reset()         { *m = GetAllReq{} }
func (m *GetAllReq) String() string { return proto.CompactTextString(m) }
func (*GetAllReq) ProtoMessage()    {}
func (*GetAllReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b7cb9d02c1f873f, []int{6}
}
func (m *GetAllReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllReq.Merge(m, src)
}
func (m *GetAllReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllReq proto.InternalMessageInfo

func (m *GetAllReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetAllReq) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func init() {
	proto.RegisterType((*DoctorNote)(nil), "booking_service.DoctorNote")
	proto.RegisterType((*DoctorNotes)(nil), "booking_service.DoctorNotes")
	proto.RegisterType((*CreateDoctorNoteReq)(nil), "booking_service.CreateDoctorNoteReq")
	proto.RegisterType((*UpdateDoctorNoteReq)(nil), "booking_service.UpdateDoctorNoteReq")
	proto.RegisterType((*FieldValueReq)(nil), "booking_service.FieldValueReq")
	proto.RegisterType((*StatusRes)(nil), "booking_service.StatusRes")
	proto.RegisterType((*GetAllReq)(nil), "booking_service.GetAllReq")
}

func init() {
	proto.RegisterFile("booking_service/doctor_notes.proto", fileDescriptor_1b7cb9d02c1f873f)
}

var fileDescriptor_1b7cb9d02c1f873f = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xfd, 0x46, 0x92, 0x1d, 0xe9, 0x3a, 0xce, 0x67, 0x26, 0xa1, 0xa8, 0x76, 0x6b, 0x8c, 0xda,
	0x82, 0x57, 0x2e, 0xa4, 0xfb, 0x82, 0xd3, 0x50, 0x63, 0x28, 0x59, 0x28, 0xa4, 0x74, 0x27, 0x64,
	0xcd, 0x34, 0x0c, 0x55, 0x34, 0xaa, 0x66, 0x6c, 0xc8, 0xae, 0x8f, 0xd1, 0x42, 0x5f, 0xa0, 0x6f,
	0x92, 0x65, 0x1f, 0xa1, 0xb8, 0x2f, 0x52, 0x34, 0x33, 0x8d, 0xff, 0x84, 0x4c, 0xa0, 0x3b, 0xdf,
	0x73, 0xaf, 0xef, 0x9c, 0x73, 0x74, 0x66, 0x20, 0x98, 0x71, 0xfe, 0x89, 0x65, 0xd7, 0x91, 0xa0,
	0xc5, 0x82, 0x25, 0xf4, 0x25, 0xe1, 0x89, 0xe4, 0x45, 0x94, 0x71, 0x49, 0xc5, 0x28, 0x2f, 0xb8,
	0xe4, 0xf8, 0xff, 0xad, 0x99, 0xe0, 0x8b, 0x05, 0x70, 0xae, 0xe6, 0x2e, 0xb8, 0xa4, 0xf8, 0x08,
	0x2c, 0x46, 0x7c, 0x34, 0x40, 0x43, 0x3b, 0xb4, 0x18, 0xc1, 0x2f, 0xe0, 0x28, 0xce, 0x73, 0xce,
	0x32, 0x79, 0x43, 0x33, 0x19, 0x31, 0xe2, 0x5b, 0xaa, 0xd7, 0x5e, 0x43, 0xa7, 0x04, 0xf7, 0xc0,
	0x33, 0x87, 0x31, 0xe2, 0xdb, 0x03, 0x34, 0xf4, 0x42, 0x57, 0x03, 0x53, 0x82, 0x9f, 0x02, 0xe4,
	0xb1, 0x64, 0xe6, 0xff, 0x8e, 0xea, 0x7a, 0x06, 0x99, 0x12, 0x1c, 0xc0, 0x61, 0x5e, 0x50, 0x91,
	0x14, 0x2c, 0x97, 0x8c, 0x67, 0x7e, 0x43, 0x0d, 0x6c, 0x60, 0xe5, 0x8a, 0xa4, 0xa0, 0xb1, 0xa4,
	0x24, 0x8a, 0xa5, 0xdf, 0xd4, 0x2b, 0x0c, 0x32, 0x96, 0x65, 0x7b, 0x9e, 0x93, 0xbf, 0xed, 0x03,
	0xdd, 0x36, 0x88, 0x6e, 0x13, 0x9a, 0x52, 0xd3, 0x76, 0x75, 0xdb, 0x20, 0x63, 0x19, 0x24, 0xd0,
	0x5a, 0x39, 0x20, 0xf0, 0x09, 0x34, 0x12, 0x3e, 0xcf, 0xa4, 0x71, 0x41, 0x17, 0xf8, 0x35, 0x1c,
	0xae, 0xdb, 0xe9, 0x5b, 0x03, 0x7b, 0xd8, 0x3a, 0xed, 0x8d, 0xb6, 0xfc, 0x1c, 0xad, 0x36, 0x85,
	0x2d, 0xb2, 0xda, 0x1a, 0x7c, 0x47, 0x70, 0xfc, 0x46, 0x11, 0x5e, 0x9b, 0xa0, 0x9f, 0x2b, 0x0c,
	0x46, 0x7b, 0x0d, 0xb6, 0x6a, 0x0d, 0xb6, 0xf7, 0x19, 0xec, 0xec, 0x1a, 0x1c, 0xdc, 0x21, 0x38,
	0xbe, 0x52, 0x86, 0x6d, 0xd2, 0x3b, 0x81, 0xc6, 0x47, 0x46, 0x53, 0xcd, 0xca, 0x0b, 0x75, 0x51,
	0xa2, 0x8b, 0x38, 0x9d, 0x53, 0xc3, 0x44, 0x17, 0x15, 0x52, 0xec, 0xbd, 0x52, 0x9c, 0x5a, 0x29,
	0x8d, 0x7d, 0x52, 0x9a, 0x15, 0x52, 0x3e, 0x40, 0xfb, 0x6d, 0xc9, 0xf2, 0x7d, 0x49, 0xea, 0xa1,
	0x1a, 0x7a, 0xe0, 0x31, 0x11, 0xc5, 0x89, 0x64, 0x0b, 0xaa, 0xe8, 0xbb, 0xa1, 0xcb, 0xc4, 0x58,
	0xd5, 0xc1, 0x33, 0xf0, 0x2e, 0x65, 0x2c, 0xe7, 0x22, 0xa4, 0x02, 0x3f, 0x82, 0xa6, 0x50, 0x85,
	0x5a, 0xeb, 0x86, 0xa6, 0x0a, 0xbe, 0x21, 0xf0, 0x26, 0x54, 0x8e, 0xd3, 0xf4, 0x5f, 0x9e, 0x8d,
	0x31, 0x38, 0x79, 0x7c, 0x4d, 0x95, 0x61, 0x4e, 0xa8, 0x7e, 0x97, 0x6b, 0x52, 0x76, 0xc3, 0xa4,
	0xf2, 0xc9, 0x09, 0x75, 0x81, 0x1f, 0x83, 0xcb, 0x0b, 0x42, 0x8b, 0x68, 0x76, 0x6b, 0xfc, 0x39,
	0x50, 0xf5, 0xd9, 0xed, 0xe9, 0x0f, 0x1b, 0xf0, 0x5a, 0xd4, 0x2f, 0x75, 0x66, 0xf1, 0x15, 0x74,
	0xb6, 0xa3, 0x89, 0x9f, 0xef, 0x24, 0xbb, 0x22, 0xbd, 0xdd, 0xba, 0xfc, 0xe3, 0x77, 0xd0, 0x9e,
	0x50, 0xb9, 0x06, 0xf4, 0x77, 0xa6, 0x37, 0x3e, 0x54, 0xfd, 0xb6, 0x09, 0xb4, 0xb4, 0xad, 0xfa,
	0x96, 0x76, 0x77, 0x66, 0xef, 0x4d, 0xef, 0x3e, 0xa9, 0xd9, 0x23, 0x4a, 0xb5, 0xdb, 0x49, 0xaf,
	0x50, 0x5b, 0x71, 0x19, 0xea, 0xf9, 0x5d, 0x40, 0xe7, 0x5c, 0x3d, 0x29, 0x0f, 0x10, 0xbc, 0x2b,
	0xe2, 0x3e, 0x5f, 0x67, 0x9d, 0xbb, 0x65, 0x1f, 0xfd, 0x5c, 0xf6, 0xd1, 0xaf, 0x65, 0x1f, 0x7d,
	0xfd, 0xdd, 0xff, 0x6f, 0xd6, 0x54, 0x4f, 0xf8, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e,
	0x82, 0xf3, 0xac, 0xe8, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DoctorNotesServiceClient is the client API for DoctorNotesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoctorNotesServiceClient interface {
	// doctorNotes
	CreateDoctorNote(ctx context.Context, in *CreateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error)
	GetDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*DoctorNote, error)
	GetAllNotes(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*DoctorNotes, error)
	UpdateDoctorNote(ctx context.Context, in *UpdateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error)
	DeleteDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error)
}

type doctorNotesServiceClient struct {
	cc *grpc.ClientConn
}

func NewDoctorNotesServiceClient(cc *grpc.ClientConn) DoctorNotesServiceClient {
	return &doctorNotesServiceClient{cc}
}

func (c *doctorNotesServiceClient) CreateDoctorNote(ctx context.Context, in *CreateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNotesService/CreateDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNotesServiceClient) GetDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNotesService/GetDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNotesServiceClient) GetAllNotes(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*DoctorNotes, error) {
	out := new(DoctorNotes)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNotesService/GetAllNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNotesServiceClient) UpdateDoctorNote(ctx context.Context, in *UpdateDoctorNoteReq, opts ...grpc.CallOption) (*DoctorNote, error) {
	out := new(DoctorNote)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNotesService/UpdateDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorNotesServiceClient) DeleteDoctorNote(ctx context.Context, in *FieldValueReq, opts ...grpc.CallOption) (*StatusRes, error) {
	out := new(StatusRes)
	err := c.cc.Invoke(ctx, "/booking_service.DoctorNotesService/DeleteDoctorNote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorNotesServiceServer is the server API for DoctorNotesService service.
type DoctorNotesServiceServer interface {
	// doctorNotes
	CreateDoctorNote(context.Context, *CreateDoctorNoteReq) (*DoctorNote, error)
	GetDoctorNote(context.Context, *FieldValueReq) (*DoctorNote, error)
	GetAllNotes(context.Context, *GetAllReq) (*DoctorNotes, error)
	UpdateDoctorNote(context.Context, *UpdateDoctorNoteReq) (*DoctorNote, error)
	DeleteDoctorNote(context.Context, *FieldValueReq) (*StatusRes, error)
}

// UnimplementedDoctorNotesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDoctorNotesServiceServer struct {
}

func (*UnimplementedDoctorNotesServiceServer) CreateDoctorNote(ctx context.Context, req *CreateDoctorNoteReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctorNote not implemented")
}
func (*UnimplementedDoctorNotesServiceServer) GetDoctorNote(ctx context.Context, req *FieldValueReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorNote not implemented")
}
func (*UnimplementedDoctorNotesServiceServer) GetAllNotes(ctx context.Context, req *GetAllReq) (*DoctorNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNotes not implemented")
}
func (*UnimplementedDoctorNotesServiceServer) UpdateDoctorNote(ctx context.Context, req *UpdateDoctorNoteReq) (*DoctorNote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctorNote not implemented")
}
func (*UnimplementedDoctorNotesServiceServer) DeleteDoctorNote(ctx context.Context, req *FieldValueReq) (*StatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctorNote not implemented")
}

func RegisterDoctorNotesServiceServer(s *grpc.Server, srv DoctorNotesServiceServer) {
	s.RegisterService(&_DoctorNotesService_serviceDesc, srv)
}

func _DoctorNotesService_CreateDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNotesServiceServer).CreateDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNotesService/CreateDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNotesServiceServer).CreateDoctorNote(ctx, req.(*CreateDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNotesService_GetDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNotesServiceServer).GetDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNotesService/GetDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNotesServiceServer).GetDoctorNote(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNotesService_GetAllNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNotesServiceServer).GetAllNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNotesService/GetAllNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNotesServiceServer).GetAllNotes(ctx, req.(*GetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNotesService_UpdateDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorNoteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNotesServiceServer).UpdateDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNotesService/UpdateDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNotesServiceServer).UpdateDoctorNote(ctx, req.(*UpdateDoctorNoteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorNotesService_DeleteDoctorNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorNotesServiceServer).DeleteDoctorNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.DoctorNotesService/DeleteDoctorNote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorNotesServiceServer).DeleteDoctorNote(ctx, req.(*FieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoctorNotesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.DoctorNotesService",
	HandlerType: (*DoctorNotesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDoctorNote",
			Handler:    _DoctorNotesService_CreateDoctorNote_Handler,
		},
		{
			MethodName: "GetDoctorNote",
			Handler:    _DoctorNotesService_GetDoctorNote_Handler,
		},
		{
			MethodName: "GetAllNotes",
			Handler:    _DoctorNotesService_GetAllNotes_Handler,
		},
		{
			MethodName: "UpdateDoctorNote",
			Handler:    _DoctorNotesService_UpdateDoctorNote_Handler,
		},
		{
			MethodName: "DeleteDoctorNote",
			Handler:    _DoctorNotesService_DeleteDoctorNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/doctor_notes.proto",
}

func (m *DoctorNote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorNote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorNote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Prescription) > 0 {
		i -= len(m.Prescription)
		copy(dAtA[i:], m.Prescription)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Prescription)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AppointmentId != 0 {
		i = encodeVarintDoctorNotes(dAtA, i, uint64(m.AppointmentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintDoctorNotes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DoctorNotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DoctorNotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DoctorNotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DoctorNotes) > 0 {
		for iNdEx := len(m.DoctorNotes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DoctorNotes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDoctorNotes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintDoctorNotes(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateDoctorNoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDoctorNoteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDoctorNoteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prescription) > 0 {
		i -= len(m.Prescription)
		copy(dAtA[i:], m.Prescription)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Prescription)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x12
	}
	if m.AppointmentId != 0 {
		i = encodeVarintDoctorNotes(dAtA, i, uint64(m.AppointmentId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateDoctorNoteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateDoctorNoteReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateDoctorNoteReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Prescription) > 0 {
		i -= len(m.Prescription)
		copy(dAtA[i:], m.Prescription)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Prescription)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PatientId) > 0 {
		i -= len(m.PatientId)
		copy(dAtA[i:], m.PatientId)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.PatientId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DoctorId) > 0 {
		i -= len(m.DoctorId)
		copy(dAtA[i:], m.DoctorId)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.DoctorId)))
		i--
		dAtA[i] = 0x22
	}
	if m.AppointmentId != 0 {
		i = encodeVarintDoctorNotes(dAtA, i, uint64(m.AppointmentId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FieldValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FieldValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StatusRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatusRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StatusRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintDoctorNotes(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintDoctorNotes(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintDoctorNotes(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDoctorNotes(dAtA []byte, offset int, v uint64) int {
	offset -= sovDoctorNotes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DoctorNote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDoctorNotes(uint64(m.Id))
	}
	if m.AppointmentId != 0 {
		n += 1 + sovDoctorNotes(uint64(m.AppointmentId))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.Prescription)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DoctorNotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovDoctorNotes(uint64(m.Count))
	}
	if len(m.DoctorNotes) > 0 {
		for _, e := range m.DoctorNotes {
			l = e.Size()
			n += 1 + l + sovDoctorNotes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDoctorNoteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppointmentId != 0 {
		n += 1 + sovDoctorNotes(uint64(m.AppointmentId))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.Prescription)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateDoctorNoteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	if m.AppointmentId != 0 {
		n += 1 + sovDoctorNotes(uint64(m.AppointmentId))
	}
	l = len(m.DoctorId)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.PatientId)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.Prescription)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatusRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.Page != 0 {
		n += 1 + sovDoctorNotes(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovDoctorNotes(uint64(m.Limit))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovDoctorNotes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDoctorNotes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDoctorNotes(x uint64) (n int) {
	return sovDoctorNotes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DoctorNote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorNote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorNote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			m.AppointmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorNotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DoctorNotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DoctorNotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DoctorNotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorNotes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorNotes = append(m.DoctorNotes, &DoctorNote{})
			if err := m.DoctorNotes[len(m.DoctorNotes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorNotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDoctorNoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDoctorNoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDoctorNoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			m.AppointmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorNotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateDoctorNoteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateDoctorNoteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateDoctorNoteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointmentId", wireType)
			}
			m.AppointmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointmentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoctorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DoctorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorNotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorNotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatusRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatusRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatusRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorNotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDoctorNotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDoctorNotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDoctorNotes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDoctorNotes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDoctorNotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDoctorNotes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDoctorNotes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDoctorNotes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDoctorNotes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDoctorNotes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDoctorNotes = fmt.Errorf("proto: unexpected end of group")
)
