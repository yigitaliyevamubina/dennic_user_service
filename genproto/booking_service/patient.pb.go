// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: booking_service/patient.proto

package booking_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Patient struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Gender               string   `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender"`
	Address              string   `protobuf:"bytes,6,opt,name=address,proto3" json:"address"`
	BloodGroup           string   `protobuf:"bytes,7,opt,name=blood_group,json=bloodGroup,proto3" json:"blood_group"`
	PhoneNumber          string   `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	City                 string   `protobuf:"bytes,9,opt,name=city,proto3" json:"city"`
	Country              string   `protobuf:"bytes,10,opt,name=country,proto3" json:"country"`
	PatientProblem       string   `protobuf:"bytes,11,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	CreatedAt            string   `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string   `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            string   `protobuf:"bytes,14,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Patient) Reset()         { *m = Patient{} }
func (m *Patient) String() string { return proto.CompactTextString(m) }
func (*Patient) ProtoMessage()    {}
func (*Patient) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{0}
}
func (m *Patient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Patient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Patient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Patient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patient.Merge(m, src)
}
func (m *Patient) XXX_Size() int {
	return m.Size()
}
func (m *Patient) XXX_DiscardUnknown() {
	xxx_messageInfo_Patient.DiscardUnknown(m)
}

var xxx_messageInfo_Patient proto.InternalMessageInfo

func (m *Patient) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Patient) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Patient) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Patient) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *Patient) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Patient) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Patient) GetBloodGroup() string {
	if m != nil {
		return m.BloodGroup
	}
	return ""
}

func (m *Patient) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Patient) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Patient) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Patient) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

func (m *Patient) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Patient) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Patient) GetDeletedAt() string {
	if m != nil {
		return m.DeletedAt
	}
	return ""
}

type Patients struct {
	Count                int64      `protobuf:"varint,1,opt,name=count,proto3" json:"count"`
	Patients             []*Patient `protobuf:"bytes,2,rep,name=patients,proto3" json:"patients"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Patients) Reset()         { *m = Patients{} }
func (m *Patients) String() string { return proto.CompactTextString(m) }
func (*Patients) ProtoMessage()    {}
func (*Patients) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{1}
}
func (m *Patients) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Patients) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Patients.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Patients) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patients.Merge(m, src)
}
func (m *Patients) XXX_Size() int {
	return m.Size()
}
func (m *Patients) XXX_DiscardUnknown() {
	xxx_messageInfo_Patients.DiscardUnknown(m)
}

var xxx_messageInfo_Patients proto.InternalMessageInfo

func (m *Patients) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Patients) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

type CreatePatientReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	BirthDate            string   `protobuf:"bytes,4,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Gender               string   `protobuf:"bytes,5,opt,name=gender,proto3" json:"gender"`
	Address              string   `protobuf:"bytes,6,opt,name=address,proto3" json:"address"`
	BloodGroup           string   `protobuf:"bytes,7,opt,name=blood_group,json=bloodGroup,proto3" json:"blood_group"`
	PhoneNumber          string   `protobuf:"bytes,8,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	City                 string   `protobuf:"bytes,9,opt,name=city,proto3" json:"city"`
	Country              string   `protobuf:"bytes,10,opt,name=country,proto3" json:"country"`
	PatientProblem       string   `protobuf:"bytes,11,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePatientReq) Reset()         { *m = CreatePatientReq{} }
func (m *CreatePatientReq) String() string { return proto.CompactTextString(m) }
func (*CreatePatientReq) ProtoMessage()    {}
func (*CreatePatientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{2}
}
func (m *CreatePatientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreatePatientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreatePatientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreatePatientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePatientReq.Merge(m, src)
}
func (m *CreatePatientReq) XXX_Size() int {
	return m.Size()
}
func (m *CreatePatientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePatientReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePatientReq proto.InternalMessageInfo

func (m *CreatePatientReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreatePatientReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CreatePatientReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *CreatePatientReq) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *CreatePatientReq) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *CreatePatientReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CreatePatientReq) GetBloodGroup() string {
	if m != nil {
		return m.BloodGroup
	}
	return ""
}

func (m *CreatePatientReq) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *CreatePatientReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *CreatePatientReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *CreatePatientReq) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

type UpdatePatientReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	FirstName            string   `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name"`
	LastName             string   `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name"`
	BirthDate            string   `protobuf:"bytes,5,opt,name=birth_date,json=birthDate,proto3" json:"birth_date"`
	Gender               string   `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender"`
	Address              string   `protobuf:"bytes,7,opt,name=address,proto3" json:"address"`
	BloodGroup           string   `protobuf:"bytes,8,opt,name=blood_group,json=bloodGroup,proto3" json:"blood_group"`
	City                 string   `protobuf:"bytes,9,opt,name=city,proto3" json:"city"`
	Country              string   `protobuf:"bytes,10,opt,name=country,proto3" json:"country"`
	PatientProblem       string   `protobuf:"bytes,11,opt,name=patient_problem,json=patientProblem,proto3" json:"patient_problem"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePatientReq) Reset()         { *m = UpdatePatientReq{} }
func (m *UpdatePatientReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePatientReq) ProtoMessage()    {}
func (*UpdatePatientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{3}
}
func (m *UpdatePatientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePatientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePatientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePatientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePatientReq.Merge(m, src)
}
func (m *UpdatePatientReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePatientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePatientReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePatientReq proto.InternalMessageInfo

func (m *UpdatePatientReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdatePatientReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdatePatientReq) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *UpdatePatientReq) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *UpdatePatientReq) GetBirthDate() string {
	if m != nil {
		return m.BirthDate
	}
	return ""
}

func (m *UpdatePatientReq) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UpdatePatientReq) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UpdatePatientReq) GetBloodGroup() string {
	if m != nil {
		return m.BloodGroup
	}
	return ""
}

func (m *UpdatePatientReq) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *UpdatePatientReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *UpdatePatientReq) GetPatientProblem() string {
	if m != nil {
		return m.PatientProblem
	}
	return ""
}

type UpdatePhoneNumber struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	PhoneNumber          string   `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePhoneNumber) Reset()         { *m = UpdatePhoneNumber{} }
func (m *UpdatePhoneNumber) String() string { return proto.CompactTextString(m) }
func (*UpdatePhoneNumber) ProtoMessage()    {}
func (*UpdatePhoneNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{4}
}
func (m *UpdatePhoneNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhoneNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhoneNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhoneNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhoneNumber.Merge(m, src)
}
func (m *UpdatePhoneNumber) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhoneNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhoneNumber.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhoneNumber proto.InternalMessageInfo

func (m *UpdatePhoneNumber) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *UpdatePhoneNumber) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *UpdatePhoneNumber) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type PatientFieldValueReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatientFieldValueReq) Reset()         { *m = PatientFieldValueReq{} }
func (m *PatientFieldValueReq) String() string { return proto.CompactTextString(m) }
func (*PatientFieldValueReq) ProtoMessage()    {}
func (*PatientFieldValueReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{5}
}
func (m *PatientFieldValueReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatientFieldValueReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatientFieldValueReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatientFieldValueReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatientFieldValueReq.Merge(m, src)
}
func (m *PatientFieldValueReq) XXX_Size() int {
	return m.Size()
}
func (m *PatientFieldValueReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PatientFieldValueReq.DiscardUnknown(m)
}

var xxx_messageInfo_PatientFieldValueReq proto.InternalMessageInfo

func (m *PatientFieldValueReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *PatientFieldValueReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *PatientFieldValueReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type PatientStatus struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PatientStatus) Reset()         { *m = PatientStatus{} }
func (m *PatientStatus) String() string { return proto.CompactTextString(m) }
func (*PatientStatus) ProtoMessage()    {}
func (*PatientStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{6}
}
func (m *PatientStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PatientStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PatientStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PatientStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PatientStatus.Merge(m, src)
}
func (m *PatientStatus) XXX_Size() int {
	return m.Size()
}
func (m *PatientStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PatientStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PatientStatus proto.InternalMessageInfo

func (m *PatientStatus) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetAllPatientsReq struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	IsActive             bool     `protobuf:"varint,3,opt,name=is_active,json=isActive,proto3" json:"is_active"`
	Page                 uint64   `protobuf:"varint,4,opt,name=page,proto3" json:"page"`
	Limit                uint64   `protobuf:"varint,5,opt,name=limit,proto3" json:"limit"`
	OrderBy              string   `protobuf:"bytes,6,opt,name=order_by,json=orderBy,proto3" json:"order_by"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllPatientsReq) Reset()         { *m = GetAllPatientsReq{} }
func (m *GetAllPatientsReq) String() string { return proto.CompactTextString(m) }
func (*GetAllPatientsReq) ProtoMessage()    {}
func (*GetAllPatientsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e8c5f44427ac9dcc, []int{7}
}
func (m *GetAllPatientsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllPatientsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllPatientsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllPatientsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllPatientsReq.Merge(m, src)
}
func (m *GetAllPatientsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllPatientsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllPatientsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllPatientsReq proto.InternalMessageInfo

func (m *GetAllPatientsReq) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *GetAllPatientsReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetAllPatientsReq) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *GetAllPatientsReq) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetAllPatientsReq) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetAllPatientsReq) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func init() {
	proto.RegisterType((*Patient)(nil), "booking_service.Patient")
	proto.RegisterType((*Patients)(nil), "booking_service.Patients")
	proto.RegisterType((*CreatePatientReq)(nil), "booking_service.CreatePatientReq")
	proto.RegisterType((*UpdatePatientReq)(nil), "booking_service.UpdatePatientReq")
	proto.RegisterType((*UpdatePhoneNumber)(nil), "booking_service.UpdatePhoneNumber")
	proto.RegisterType((*PatientFieldValueReq)(nil), "booking_service.PatientFieldValueReq")
	proto.RegisterType((*PatientStatus)(nil), "booking_service.PatientStatus")
	proto.RegisterType((*GetAllPatientsReq)(nil), "booking_service.GetAllPatientsReq")
}

func init() { proto.RegisterFile("booking_service/patient.proto", fileDescriptor_e8c5f44427ac9dcc) }

var fileDescriptor_e8c5f44427ac9dcc = []byte{
	// 663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x56, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0xfe, 0xb5, 0xe9, 0x9f, 0xf4, 0x74, 0xed, 0x36, 0x6b, 0xfa, 0xc9, 0xdb, 0xb4, 0xb2, 0x45,
	0x42, 0xdb, 0xd5, 0x90, 0x06, 0x2f, 0xd0, 0x31, 0xb1, 0x1b, 0x18, 0x53, 0x26, 0x26, 0xee, 0x22,
	0xa7, 0xf1, 0x3a, 0x8b, 0x34, 0x09, 0x8e, 0x3b, 0xa9, 0x6f, 0xc2, 0x15, 0x12, 0xcf, 0xc2, 0x0d,
	0xe2, 0x8a, 0x47, 0x40, 0xe3, 0x41, 0x40, 0x3e, 0x76, 0x60, 0x6d, 0x49, 0x51, 0x11, 0xdc, 0x71,
	0xe7, 0xef, 0xfb, 0x4e, 0x8e, 0x8f, 0xbf, 0x73, 0xec, 0x16, 0x76, 0xc2, 0x34, 0x7d, 0x25, 0x92,
	0x61, 0x90, 0x73, 0x79, 0x23, 0x06, 0xfc, 0x41, 0xc6, 0x94, 0xe0, 0x89, 0x3a, 0xcc, 0x64, 0xaa,
	0x52, 0xb2, 0x3a, 0x23, 0x7b, 0x6f, 0x1d, 0x68, 0x9e, 0x9b, 0x10, 0xd2, 0x85, 0xaa, 0x88, 0x68,
	0x65, 0xb7, 0x72, 0xd0, 0xf2, 0xab, 0x22, 0x22, 0x3b, 0x00, 0x57, 0x42, 0xe6, 0x2a, 0x48, 0xd8,
	0x88, 0xd3, 0x2a, 0xf2, 0x2d, 0x64, 0xce, 0xd8, 0x88, 0x93, 0x6d, 0x68, 0xc5, 0xac, 0x50, 0x1d,
	0x54, 0x5d, 0x4d, 0xa0, 0xb8, 0x03, 0x10, 0x0a, 0xa9, 0xae, 0x83, 0x88, 0x29, 0x4e, 0x6b, 0xe6,
	0x5b, 0x64, 0x4e, 0x98, 0xe2, 0xe4, 0x7f, 0x68, 0x0c, 0x79, 0x12, 0x71, 0x49, 0xeb, 0x28, 0x59,
	0x44, 0x28, 0x34, 0x59, 0x14, 0x49, 0x9e, 0xe7, 0xb4, 0x81, 0x42, 0x01, 0xc9, 0x3d, 0x68, 0x87,
	0x71, 0x9a, 0x46, 0xc1, 0x50, 0xa6, 0xe3, 0x8c, 0x36, 0x51, 0x05, 0xa4, 0x4e, 0x35, 0x43, 0xf6,
	0x60, 0x25, 0xbb, 0x4e, 0x13, 0x1e, 0x24, 0xe3, 0x51, 0xc8, 0x25, 0x75, 0x31, 0xa2, 0x8d, 0xdc,
	0x19, 0x52, 0x84, 0x40, 0x6d, 0x20, 0xd4, 0x84, 0xb6, 0x50, 0xc2, 0xb5, 0xde, 0x71, 0x90, 0x8e,
	0x13, 0x25, 0x27, 0x14, 0xcc, 0x8e, 0x16, 0x92, 0x7d, 0x58, 0xb5, 0xe6, 0x05, 0x99, 0x4c, 0xc3,
	0x98, 0x8f, 0x68, 0x1b, 0x23, 0xba, 0x96, 0x3e, 0x37, 0xac, 0x3e, 0xeb, 0x40, 0x72, 0xa6, 0x78,
	0x14, 0x30, 0x45, 0x57, 0xcc, 0x59, 0x2d, 0xd3, 0x57, 0x5a, 0x1e, 0x67, 0x51, 0x21, 0x77, 0x8c,
	0x6c, 0x19, 0x23, 0x47, 0x3c, 0xe6, 0x56, 0xee, 0x1a, 0xd9, 0x32, 0x7d, 0xe5, 0x5d, 0x82, 0x6b,
	0xfb, 0x93, 0x93, 0x0d, 0xa8, 0x63, 0x71, 0xd8, 0x23, 0xc7, 0x37, 0x80, 0x3c, 0x02, 0xd7, 0x16,
	0x94, 0xd3, 0xea, 0xae, 0x73, 0xd0, 0x3e, 0xa2, 0x87, 0x33, 0x6d, 0x3e, 0xb4, 0x29, 0xfc, 0xef,
	0x91, 0xde, 0xc7, 0x2a, 0xac, 0x3d, 0xc6, 0x1a, 0x0b, 0x8d, 0xbf, 0xfe, 0x37, 0x01, 0xbf, 0x37,
	0x01, 0xde, 0xfb, 0x2a, 0xac, 0xbd, 0xc0, 0x8e, 0xde, 0x31, 0x73, 0x03, 0xea, 0x57, 0x82, 0xc7,
	0x85, 0x9f, 0x06, 0x68, 0xf6, 0x86, 0xc5, 0xe3, 0xc2, 0x4d, 0x03, 0x66, 0x8c, 0x76, 0x16, 0x1a,
	0x5d, 0x5b, 0x68, 0x74, 0xbd, 0xdc, 0xe8, 0x46, 0x99, 0xd1, 0xcd, 0x85, 0x46, 0xbb, 0x73, 0x46,
	0xff, 0x25, 0x17, 0x43, 0x58, 0xb7, 0x26, 0xde, 0xe9, 0xd8, 0x32, 0x2e, 0xce, 0x0e, 0x80, 0x33,
	0x37, 0x00, 0x5e, 0x00, 0x1b, 0xb6, 0x45, 0x4f, 0x74, 0xa2, 0x4b, 0xfd, 0xdd, 0xb2, 0xcd, 0xda,
	0x86, 0x96, 0xc8, 0x03, 0x36, 0x50, 0xe2, 0xc6, 0xf4, 0xca, 0xf5, 0x5d, 0x91, 0xf7, 0x11, 0x7b,
	0xfb, 0xd0, 0xb1, 0x1b, 0x5c, 0x28, 0xa6, 0xc6, 0xb9, 0xf6, 0x3f, 0xc7, 0x15, 0xa6, 0x76, 0x7d,
	0x8b, 0xbc, 0x77, 0x15, 0x58, 0x3f, 0xe5, 0xaa, 0x1f, 0xc7, 0xc5, 0xfd, 0xfe, 0x93, 0x75, 0xe8,
	0x1e, 0x65, 0x6c, 0x68, 0xa6, 0xa5, 0xe6, 0xe3, 0x5a, 0xa7, 0x89, 0xc5, 0x48, 0x28, 0x1c, 0x92,
	0x9a, 0x6f, 0x00, 0xd9, 0x04, 0x37, 0x95, 0x11, 0x97, 0x41, 0x38, 0x29, 0xae, 0x1c, 0xe2, 0xe3,
	0xc9, 0xd1, 0x57, 0x07, 0x56, 0x8b, 0xea, 0x2e, 0xcc, 0x53, 0x42, 0x9e, 0x42, 0x67, 0xea, 0xdd,
	0x20, 0x7b, 0x73, 0xaf, 0xcd, 0xec, 0xbb, 0xb2, 0x55, 0xfa, 0x20, 0x91, 0x67, 0x00, 0xa7, 0x5c,
	0x15, 0xe8, 0x7e, 0x59, 0xdc, 0x54, 0xb3, 0x16, 0xa4, 0x7b, 0x0e, 0xdd, 0x69, 0x4f, 0x89, 0x37,
	0x17, 0x3b, 0x67, 0xfa, 0xd6, 0x66, 0x59, 0xbe, 0x5c, 0x9f, 0x76, 0xea, 0x62, 0xff, 0xe4, 0xb4,
	0xb3, 0x17, 0x7f, 0x41, 0x79, 0x2f, 0x81, 0xdc, 0x99, 0xf0, 0x82, 0xf5, 0xca, 0x52, 0xfe, 0x98,
	0xdb, 0xad, 0x5e, 0x59, 0x4e, 0x3b, 0x65, 0x97, 0xd0, 0x39, 0xc1, 0xdf, 0x8c, 0x25, 0xad, 0xfc,
	0x45, 0xde, 0xe3, 0xb5, 0x0f, 0xb7, 0xbd, 0xca, 0xa7, 0xdb, 0x5e, 0xe5, 0xf3, 0x6d, 0xaf, 0xf2,
	0xe6, 0x4b, 0xef, 0xbf, 0xb0, 0x81, 0xff, 0x24, 0x1e, 0x7e, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x30,
	0x03, 0x0e, 0x91, 0x6a, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PatientsServiceClient is the client API for PatientsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PatientsServiceClient interface {
	// patients
	CreatePatient(ctx context.Context, in *CreatePatientReq, opts ...grpc.CallOption) (*Patient, error)
	GetPatient(ctx context.Context, in *PatientFieldValueReq, opts ...grpc.CallOption) (*Patient, error)
	GetAllPatients(ctx context.Context, in *GetAllPatientsReq, opts ...grpc.CallOption) (*Patients, error)
	UpdatePatient(ctx context.Context, in *UpdatePatientReq, opts ...grpc.CallOption) (*Patient, error)
	UpdatePhonePatient(ctx context.Context, in *UpdatePhoneNumber, opts ...grpc.CallOption) (*PatientStatus, error)
	DeletePatient(ctx context.Context, in *PatientFieldValueReq, opts ...grpc.CallOption) (*PatientStatus, error)
}

type patientsServiceClient struct {
	cc *grpc.ClientConn
}

func NewPatientsServiceClient(cc *grpc.ClientConn) PatientsServiceClient {
	return &patientsServiceClient{cc}
}

func (c *patientsServiceClient) CreatePatient(ctx context.Context, in *CreatePatientReq, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.PatientsService/CreatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsServiceClient) GetPatient(ctx context.Context, in *PatientFieldValueReq, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.PatientsService/GetPatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsServiceClient) GetAllPatients(ctx context.Context, in *GetAllPatientsReq, opts ...grpc.CallOption) (*Patients, error) {
	out := new(Patients)
	err := c.cc.Invoke(ctx, "/booking_service.PatientsService/GetAllPatients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsServiceClient) UpdatePatient(ctx context.Context, in *UpdatePatientReq, opts ...grpc.CallOption) (*Patient, error) {
	out := new(Patient)
	err := c.cc.Invoke(ctx, "/booking_service.PatientsService/UpdatePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsServiceClient) UpdatePhonePatient(ctx context.Context, in *UpdatePhoneNumber, opts ...grpc.CallOption) (*PatientStatus, error) {
	out := new(PatientStatus)
	err := c.cc.Invoke(ctx, "/booking_service.PatientsService/UpdatePhonePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientsServiceClient) DeletePatient(ctx context.Context, in *PatientFieldValueReq, opts ...grpc.CallOption) (*PatientStatus, error) {
	out := new(PatientStatus)
	err := c.cc.Invoke(ctx, "/booking_service.PatientsService/DeletePatient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientsServiceServer is the server API for PatientsService service.
type PatientsServiceServer interface {
	// patients
	CreatePatient(context.Context, *CreatePatientReq) (*Patient, error)
	GetPatient(context.Context, *PatientFieldValueReq) (*Patient, error)
	GetAllPatients(context.Context, *GetAllPatientsReq) (*Patients, error)
	UpdatePatient(context.Context, *UpdatePatientReq) (*Patient, error)
	UpdatePhonePatient(context.Context, *UpdatePhoneNumber) (*PatientStatus, error)
	DeletePatient(context.Context, *PatientFieldValueReq) (*PatientStatus, error)
}

// UnimplementedPatientsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPatientsServiceServer struct {
}

func (*UnimplementedPatientsServiceServer) CreatePatient(ctx context.Context, req *CreatePatientReq) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (*UnimplementedPatientsServiceServer) GetPatient(ctx context.Context, req *PatientFieldValueReq) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatient not implemented")
}
func (*UnimplementedPatientsServiceServer) GetAllPatients(ctx context.Context, req *GetAllPatientsReq) (*Patients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPatients not implemented")
}
func (*UnimplementedPatientsServiceServer) UpdatePatient(ctx context.Context, req *UpdatePatientReq) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (*UnimplementedPatientsServiceServer) UpdatePhonePatient(ctx context.Context, req *UpdatePhoneNumber) (*PatientStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhonePatient not implemented")
}
func (*UnimplementedPatientsServiceServer) DeletePatient(ctx context.Context, req *PatientFieldValueReq) (*PatientStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}

func RegisterPatientsServiceServer(s *grpc.Server, srv PatientsServiceServer) {
	s.RegisterService(&_PatientsService_serviceDesc, srv)
}

func _PatientsService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientsService/CreatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsServiceServer).CreatePatient(ctx, req.(*CreatePatientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsService_GetPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsServiceServer).GetPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientsService/GetPatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsServiceServer).GetPatient(ctx, req.(*PatientFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsService_GetAllPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPatientsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsServiceServer).GetAllPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientsService/GetAllPatients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsServiceServer).GetAllPatients(ctx, req.(*GetAllPatientsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientsService/UpdatePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsServiceServer).UpdatePatient(ctx, req.(*UpdatePatientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsService_UpdatePhonePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsServiceServer).UpdatePhonePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientsService/UpdatePhonePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsServiceServer).UpdatePhonePatient(ctx, req.(*UpdatePhoneNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientsService_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientFieldValueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientsServiceServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booking_service.PatientsService/DeletePatient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientsServiceServer).DeletePatient(ctx, req.(*PatientFieldValueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PatientsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booking_service.PatientsService",
	HandlerType: (*PatientsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePatient",
			Handler:    _PatientsService_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatient",
			Handler:    _PatientsService_GetPatient_Handler,
		},
		{
			MethodName: "GetAllPatients",
			Handler:    _PatientsService_GetAllPatients_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _PatientsService_UpdatePatient_Handler,
		},
		{
			MethodName: "UpdatePhonePatient",
			Handler:    _PatientsService_UpdatePhonePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _PatientsService_DeletePatient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking_service/patient.proto",
}

func (m *Patient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Patient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeletedAt) > 0 {
		i -= len(m.DeletedAt)
		copy(dAtA[i:], m.DeletedAt)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.DeletedAt)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BloodGroup) > 0 {
		i -= len(m.BloodGroup)
		copy(dAtA[i:], m.BloodGroup)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.BloodGroup)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Patients) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Patients) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Patients) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Patients) > 0 {
		for iNdEx := len(m.Patients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Patients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPatient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintPatient(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreatePatientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePatientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreatePatientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BloodGroup) > 0 {
		i -= len(m.BloodGroup)
		copy(dAtA[i:], m.BloodGroup)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.BloodGroup)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePatientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePatientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePatientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PatientProblem) > 0 {
		i -= len(m.PatientProblem)
		copy(dAtA[i:], m.PatientProblem)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.PatientProblem)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Country) > 0 {
		i -= len(m.Country)
		copy(dAtA[i:], m.Country)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Country)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.BloodGroup) > 0 {
		i -= len(m.BloodGroup)
		copy(dAtA[i:], m.BloodGroup)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.BloodGroup)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Gender) > 0 {
		i -= len(m.Gender)
		copy(dAtA[i:], m.Gender)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Gender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BirthDate) > 0 {
		i -= len(m.BirthDate)
		copy(dAtA[i:], m.BirthDate)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.BirthDate)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdatePhoneNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhoneNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatePhoneNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatientFieldValueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatientFieldValueReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatientFieldValueReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PatientStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PatientStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PatientStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllPatientsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllPatientsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllPatientsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderBy) > 0 {
		i -= len(m.OrderBy)
		copy(dAtA[i:], m.OrderBy)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.OrderBy)))
		i--
		dAtA[i] = 0x32
	}
	if m.Limit != 0 {
		i = encodeVarintPatient(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintPatient(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Field) > 0 {
		i -= len(m.Field)
		copy(dAtA[i:], m.Field)
		i = encodeVarintPatient(dAtA, i, uint64(len(m.Field)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPatient(dAtA []byte, offset int, v uint64) int {
	offset -= sovPatient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Patient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.BloodGroup)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.DeletedAt)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Patients) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovPatient(uint64(m.Count))
	}
	if len(m.Patients) > 0 {
		for _, e := range m.Patients {
			l = e.Size()
			n += 1 + l + sovPatient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreatePatientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.BloodGroup)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePatientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.BirthDate)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.BloodGroup)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.PatientProblem)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePhoneNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatientFieldValueReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PatientStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllPatientsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	if m.Page != 0 {
		n += 1 + sovPatient(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovPatient(uint64(m.Limit))
	}
	l = len(m.OrderBy)
	if l > 0 {
		n += 1 + l + sovPatient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPatient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPatient(x uint64) (n int) {
	return sovPatient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Patient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloodGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Patients) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Patients: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Patients: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Patients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Patients = append(m.Patients, &Patient{})
			if err := m.Patients[len(m.Patients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePatientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePatientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePatientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloodGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePatientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePatientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePatientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BirthDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloodGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloodGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatientProblem", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PatientProblem = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhoneNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientFieldValueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientFieldValueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientFieldValueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PatientStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PatientStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PatientStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllPatientsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllPatientsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllPatientsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPatient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPatient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPatient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPatient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPatient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPatient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPatient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPatient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPatient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPatient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPatient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPatient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPatient = fmt.Errorf("proto: unexpected end of group")
)
